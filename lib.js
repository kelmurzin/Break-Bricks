const Холст = document.getElementById("game")
const Контекст = Холст.getContext("2d")

const Холст_Задний_Фон = document.getElementById("background")
const Контекст_Задний_Фон = Холст_Задний_Фон.getContext("2d")

const Холст_Интерфейс = document.getElementById("ui")
const Контекст_Интерфейс = Холст_Интерфейс.getContext("2d")

function Ориентация_Экрана_Выбрать(п_Ориентация) {
    switch (п_Ориентация) {
        case "Горизонтальная":
            Холст.width = 1920
            Холст.height = 1080
            Холст.style.aspectRatio = 16 / 9
            break
        case "Вертикальная":
            Холст.width = 1080
            Холст.height = 1920
            Холст.style.aspectRatio = 9 / 16
            break
    }

    Холст_Задний_Фон.width = Холст.width
    Холст_Задний_Фон.height = Холст.height
    Холст_Задний_Фон.style.aspectRatio = Холст.style.aspectRatio

    Холст_Интерфейс.width = Холст.width
    Холст_Интерфейс.height = Холст.height
    Холст_Интерфейс.style.aspectRatio = Холст.style.aspectRatio
}

const Кадры_В_Секунду = 60

const Время_Кадра_В_Минуту = (1000 / 60) * (60 / Кадры_В_Секунду) - (1000 / 60) * 0.5

let Время_Последнего_Кадра = 0

function Холст_Очистить() {
    Контекст.clearRect(0, 0, Холст.width, Холст.height)
}

let Соотношение_Сторон_9_На_16 = false

let Платформа_Название

function Определить_Платформу() {
    if (navigator.userAgent.indexOf("Win") != -1) Платформа_Название = "Windows"
    if (navigator.userAgent.indexOf("Mac") != -1) Платформа_Название = "Macintosh"
    if (navigator.userAgent.indexOf("Linux") != -1) Платформа_Название = "Linux"
    if (navigator.userAgent.indexOf("Android") != -1) Платформа_Название = "Android"
    if (navigator.userAgent.indexOf("like Mac") != -1) Платформа_Название = "iOS"
}
Определить_Платформу()

function Размер_Холста_Изменить(Окно) {
    if (Окно.innerWidth <= Холст.clientWidth) {
        Соотношение_Сторон_9_На_16 = false
    }
    else if ((Окно.innerWidth / Окно.innerHeight) >= 1.7 || Холст.clientHeight >= Окно.innerHeight) {
        Соотношение_Сторон_9_На_16 = true
    }
    else {
        Соотношение_Сторон_9_На_16 = false
    }
}

const Проверка_Размер_Холста = setInterval(() => {
    Размер_Холста_Изменить(window)
})

window.addEventListener('resize', function () {
    Размер_Холста_Изменить(this)
})

class Позиция {
    constructor(X = 0, Y = 0) {
        this.X = X
        this.Y = Y
    }
}

function Определить_Позиции_Мыши(Позиция, Событие) {

    if (!Соотношение_Сторон_9_На_16) {
        if (Позиция === "X")
            return Math.floor(Событие.clientX * (Холст.width / Холст.clientWidth))
        if (Позиция === "Y") {
            if (Холст.clientHeight < this.innerHeight) {
                return Math.floor(
                    (this.innerHeight / 2 - Холст.clientHeight / 2 - Событие.clientY) * (Холст.height / Холст.clientHeight) * -1
                )
            } else {
                return Math.floor(
                    Событие.clientY * (Холст.height / (this.innerWidth / 1.777777777777778))
                )
            }
        }
    } else {
        if (Позиция === "X") {
            if (Холст.clientWidth < this.innerWidth) {
                return Math.floor(
                    (this.innerWidth / 2 - Холст.clientWidth / 2 - Событие.clientX) * (Холст.width / Холст.clientWidth) * -1
                )
            } else {
                return Math.floor(
                    Событие.clientX * (Холст.width / (this.innerHeight / 0.5625))
                )
            }
        }

        if (Позиция === "Y")
            return Math.floor(Событие.clientY * (Холст.height / this.innerHeight))
    }
}

const Движение = {
    Вверх: false,
    Вниз: false,
    Влево: false,
    Вправо: false
}

function Курсор_Изменить_Спрайт(Спрайт) {
    document.body.style.cursor = `url(${Спрайт.src}), auto`  //// 24x24
}

function Линия_Создать({
    Начало_Линии_Позиция_X = 0,
    Начало_Линии_Позиция_Y = 0,
    Конец_Линии_Позиция_X = 0,
    Конец_Линии_Позиция_Y = 0,
    Цвет = "black",
    Толщина_Линии = 6,
    Закруглить_Концы_Линии = false,
    Прозрачность = 1,
    п_Контекст = Контекст,
    Штрих = false,
}) {
    п_Контекст.beginPath()
    if (Штрих) {
        п_Контекст.setLineDash([5, 15])
    }
    п_Контекст.globalAlpha = Прозрачность
    п_Контекст.strokeStyle = Цвет
    п_Контекст.lineWidth = Толщина_Линии
    п_Контекст.moveTo(Начало_Линии_Позиция_X, Начало_Линии_Позиция_Y)
    п_Контекст.lineTo(Конец_Линии_Позиция_X, Конец_Линии_Позиция_Y)
    if (Закруглить_Концы_Линии)
        п_Контекст.lineCap = "round"
    п_Контекст.stroke()
}

function Линия_Квадратичная_Создать({
    Начало_Линии_Позиция_X = 0,
    Начало_Линии_Позиция_Y = 0,
    Контрольная_Точка_Позиция_X = 0,
    Контрольная_Точка_Позиция_Y = 0,
    Конец_Линии_Позиция_X = 0,
    Конец_Линии_Позиция_Y = 0,
    Цвет = "black",
    Толщина_Линии = 6,
    Прозрачность = 1
}) {
    Контекст.globalAlpha = Прозрачность
    Контекст.strokeStyle = Цвет
    Контекст.beginPath()
    Контекст.lineWidth = Толщина_Линии
    Контекст.moveTo(Начало_Линии_Позиция_X, Начало_Линии_Позиция_Y)
    Контекст.quadraticCurveTo(
        Контрольная_Точка_Позиция_X,
        Контрольная_Точка_Позиция_Y,
        Конец_Линии_Позиция_X,
        Конец_Линии_Позиция_Y,
    )
    Контекст.stroke()
}

let Текст_Статичный = []
let Контекст_Статичный_Очищен = false

class Текст {
    constructor({
        Текст = "Текст",
        Позиция_X = 0,
        Позиция_Y = 0,
        Выравнивание_По = "center",
        Цвет = "black",
        Размер_Шрифта = "25",
        Название_Шрифта = "FontsLIB",
        Прозрачность = 1,
        Цвет_Тени = "black",
        Смещение_Тени_По_X = 2,
        Смещение_Тени_По_Y = 2,
        Тень = false,
        Обводка = false,
        Цвет_Обводки = "black",
        Толщина_Линии_Обводки = 5,
        Базовая_Линия = "bottom",
        п_Контекст = Контекст,
        Межстрочный_Интервал = 0,
        Расстояние_Между_Символами = 0,
        Тень_Размытие = 0,
        Ширина,
        Вращение = false,
        Статичен = false
    }) {
        this.Контекст = п_Контекст
        this.Текст = Текст + ""
        this.Позиция = new Позиция()
        this.Позиция.X = Позиция_X
        this.Позиция.Y = Позиция_Y
        this.Выравнивание_По = Выравнивание_По
        this.Цвет = Цвет
        this.Размер_Шрифта = Размер_Шрифта
        this.Название_Шрифта = Название_Шрифта
        this.Прозрачность = Прозрачность
        this.Цвет_Тени = Цвет_Тени
        this.Смещение_Тени_По_X = Смещение_Тени_По_X
        this.Смещение_Тени_По_Y = Смещение_Тени_По_Y
        this.Тень = Тень
        this.Обводка = Обводка

        this.Цвет_Обводки = Цвет_Обводки
        this.Толщина_Линии_Обводки = Толщина_Линии_Обводки

        this.Базовая_Линия = Базовая_Линия

        this.Межстрочный_Интервал = Межстрочный_Интервал
        this.Расстояние_Между_Символами = Расстояние_Между_Символами
        this.Тень_Размытие = Тень_Размытие

        this.Ширина = Ширина

        this.Угол_В_Радианах = 1

        this.Позиция_X_При_Вращении = 0
        this.Позиция_Y_При_Вращении = 0

        this.Вращение = Вращение

        this.Статичен = Статичен
        if (this.Статичен) {
            Текст_Статичный.push(this)
        }
    }

    Отрисовать() {
        this.Текст = this.Текст + ""

        this.Контекст.globalAlpha = this.Прозрачность
        this.Контекст.textAlign = this.Выравнивание_По
        this.Контекст.textBaseline = this.Базовая_Линия
        this.Контекст.font = `${this.Размер_Шрифта}px ${this.Название_Шрифта}`

        this.Контекст.letterSpacing = this.Расстояние_Между_Символами !== 0 && `${this.Расстояние_Между_Символами}px`

        if (this.Тень) {
            this.Контекст.shadowColor = this.Цвет_Тени
            this.Контекст.shadowOffsetX = this.Смещение_Тени_По_X
            this.Контекст.shadowOffsetY = this.Смещение_Тени_По_Y
            this.Контекст.shadowBlur = this.Тень_Размытие
        } else {
            this.Контекст.shadowColor = ""
            this.Контекст.shadowOffsetX = 0
            this.Контекст.shadowOffsetY = 0
            this.Контекст.shadowBlur = 0
        }

        if (this.Обводка) {
            this.Контекст.lineWidth = this.Толщина_Линии_Обводки
            this.Контекст.strokeText(this.Текст, this.Позиция.X, this.Позиция.Y)
            this.Контекст.strokeStyle = this.Цвет_Обводки
        }

        this.Контекст.fillStyle = this.Цвет

        this.Строка_Следующая = this.Текст.indexOf('\n')
        this.Текст_Массив = this.Строка_Следующая == -1 ? [] : this.Текст.split('\n')

        if (this.Текст_Массив.length > 0) { //////////////////////////////////////// Указать Размер_Шрифта ///////////////////////////////////////////////

            for (let и = 0; и < this.Текст_Массив.length; и++) {
                this.Межстрочный_Интервал = и == 0 ? 0 : this.Межстрочный_Интервал += this.Размер_Шрифта + (this.Размер_Шрифта / 2)
                this.Контекст.fillText(this.Текст_Массив[и], this.Позиция.X, this.Позиция.Y + this.Межстрочный_Интервал)
            }
            return
        }
        this.Контекст.fillText(this.Текст, this.Позиция.X, this.Позиция.Y, this.Ширина)
    }

    Обновить(Текст = "") {
        if (Текст != "")
            this.Текст = Текст

        if (this.Статичен) {
            if (!Контекст_Статичный_Очищен) {
                this.Контекст.clearRect(0, 0, Холст.width, Холст.height)
                Контекст_Статичный_Очищен = true
            }
            for (let и = 0; и < Текст_Статичный.length; и++) {
                let п_Элемент = Текст_Статичный[и]
                п_Элемент.Отрисовать()
            }
            Контекст_Статичный_Очищен = false
            return this
        }

        if (this.Вращение) {
            this.Контекст.save()
            this.Контекст.translate(this.Позиция_X_При_Вращении, this.Позиция_Y_При_Вращении)
            this.Контекст.rotate(this.Угол_В_Радианах)
            this.Отрисовать()
            this.Контекст.restore()
            return this
        }
        this.Отрисовать()
        return this
    }
}

const Мышь = {
    Позиция: new Позиция(Холст.width / 2, Холст.height / 2),
    Ширина: 1,
    Высота: 1,
    Клик: false,
    Коллайдер: {
        Позиция: new Позиция(),
        Смещение_По_X: 0,
        Смещение_По_Y: 0,
        Измененная_Позиция_X: 0,
        Измененная_Позиция_Y: 0,
        Ширина: 5,
        Высота: 5,
        Угол_В_Радианах: 0,
    }
}

class Объект {
    #Позиция_По_X = 0
    #Позиция_По_Y = 0
    #Смещение_По_X = 0
    #Смещение_По_Y = 0

    constructor({
        Позиция_X = 0,
        Позиция_Y = 0,
        Скорость_По_X = 0,
        Скорость_По_Y = 0,
        п_Контекст = Контекст,
        Тег = "",
        Тень = false,
        Цвет_Тени = "black",
        Смещение_Тени_По_X = 5,
        Смещение_Тени_По_Y = 5,
        Тень_Размытие = 0,
        Якорь = 0
    }) {
        this.Позиция = new Позиция(Позиция_X, Позиция_Y)
        this.Скорость_По_X = Скорость_По_X
        this.Скорость_По_Y = Скорость_По_Y
        this.Столкнулся_С_Объектом = false
        this.Твердое_Тело = false
        this.Находиться_На_Земле = false
        this.Объект_Остановился = false
        this.Тег = null
        this.Угол_В_Радианах = 0
        this.Угол_В_Градусах = 0
        this.Контекст = п_Контекст
        this.Тег = Тег

        this.Тень = Тень
        this.Цвет_Тени = Цвет_Тени
        this.Смещение_Тени_По_X = Смещение_Тени_По_X
        this.Смещение_Тени_По_Y = Смещение_Тени_По_Y
        this.Тень_Размытие = Тень_Размытие

        this.Масштаб = 1

        this.Якорь = Якорь

        this.#Позиция_По_X = Позиция_X
        this.#Позиция_По_Y = Позиция_Y

        this.Сместить = 1
    }

    get _Позиция_По_X() {
        return this.#Позиция_По_X
    }
    get _Позиция_По_Y() {
        return this.#Позиция_По_Y
    }

    get _Смещение_По_X() {
        return this.#Смещение_По_X
    }
    get _Смещение_По_Y() {
        return this.#Смещение_По_Y
    }

    Движение_По_Клику(Скорость = 20) {
        let Движение_По_X
        let Движение_По_Y

        if (this.Ширина) {
            Движение_По_X = this.#Позиция_По_X + this.Ширина / 2 - Мышь.Позиция.X
            Движение_По_Y = this.#Позиция_По_Y + this.Высота / 2 - Мышь.Позиция.Y
        }
        if (Мышь.Позиция.X != this.#Позиция_По_X) {
            this.Позиция.X -= Движение_По_X / Скорость
        }
        if (Мышь.Позиция.Y != this.#Позиция_По_Y) {
            this.Позиция.Y -= Движение_По_Y / Скорость
        }
    }

    Следовать_За_Объектом(Объект, Скорость) {
        this.Направление_По_X = Объект.#Позиция_По_X - this.#Позиция_По_X - this.Ширина / 2
        this.Направление_По_Y = Объект.#Позиция_По_Y - this.#Позиция_По_Y - this.Высота / 2
        this.Дистанция = Math.sqrt(this.Направление_По_X * this.Направление_По_X + this.Направление_По_Y * this.Направление_По_Y)
        this.Скорость_По_X = (this.Направление_По_X / this.Дистанция) * Скорость
        this.Скорость_По_Y = (this.Направление_По_Y / this.Дистанция) * Скорость
    }

    Коллайдер_Добавить() {
        if (this.Радиус && (this.Ширина || this.Высота)) {
            console.log("Неверные свойства коллайдера, есть (Радиус и Ширина/Высота) у объекта ", this)
            return
        }
        this.Коллайдер = {
            Позиция: new Позиция(this.#Позиция_По_X, this.#Позиция_По_Y),
            Смещение_По_X: 0,
            Смещение_По_Y: 0,
            Измененная_Позиция_X: 0,
            Измененная_Позиция_Y: 0,
            Измененная_Ширина: "",
            Измененная_Высота: "",
            Угол_В_Радианах: this.Угол_В_Радианах,
            Угол_В_Градусах: this.Угол_В_Градусах
        }

        if (this.Радиус) {
            this.Коллайдер.Радиус = this.Радиус
            return this
        }

        this.Коллайдер.Ширина = this.Ширина
        this.Коллайдер.Высота = this.Высота
        return this
    }

    Коллайдер_Изменить({ Позиция_X = 0, Позиция_Y = 0, Смещение_По_X = 0, Смещение_По_Y = 0, Ширина, Высота, Радиус = "", Сместить = 0 }) {
        this.Коллайдер.Смещение_По_X = Смещение_По_X
        this.Коллайдер.Смещение_По_Y = Смещение_По_Y

        if (this.Радиус) {
            this.Коллайдер.Радиус = Радиус
            return this
        }
        this.Коллайдер.Измененная_Ширина = Ширина
        this.Коллайдер.Измененная_Высота = Высота

        this.Коллайдер.Ширина = this.Коллайдер.Измененная_Ширина || this.Ширина
        this.Коллайдер.Высота = this.Коллайдер.Измененная_Высота || this.Высота

        this.Коллайдер_Изменен = true

        this.Сместить = Сместить
        return this
    }

    Коллайдер_Обновлять() {
        if (this.Радиус && (this.Ширина || this.Высота)) {
            console.log("Неверные свойства коллайдера, есть (Радиус и Ширина/Высота) у ", this)
            return
        }
        this.Коллайдер.Угол_В_Градусах = this.Угол_В_Градусах
        this.Коллайдер.Угол_В_Радианах = this.Угол_В_Радианах

        this.Коллайдер.Измененная_Позиция_X = this.#Позиция_По_X + this.Коллайдер.Смещение_По_X
        this.Коллайдер.Измененная_Позиция_Y = this.#Позиция_По_Y + this.Коллайдер.Смещение_По_Y
        this.Коллайдер.Ширина = this.Коллайдер.Измененная_Ширина || this.Ширина
        this.Коллайдер.Высота = this.Коллайдер.Измененная_Высота || this.Высота

        const п_Точка = Точка_Вращения_Получить(
            this.Коллайдер.Позиция.X,
            this.Коллайдер.Позиция.Y,
            this.Коллайдер.Ширина, this.Коллайдер.Высота, this.Угол_В_Радианах
        )

        let Точка_Лево = this.Якорь !== 0.5 && (this.Угол_В_Градусах !== 0 || this.Угол_В_Радианах !== 0) ? (this.Коллайдер.Позиция.X - п_Точка.Лево
            + this.#Смещение_По_X
        ) : 0
        let Точка_Верх = this.Якорь !== 0.5 && (this.Угол_В_Градусах !== 0 || this.Угол_В_Радианах !== 0) ? (this.Коллайдер.Позиция.Y - п_Точка.Верх
            + this.#Смещение_По_Y
        ) : 0

        this.Коллайдер.Позиция.X = this.Коллайдер.Измененная_Позиция_X
            + (Точка_Лево || 0)

        this.Коллайдер.Позиция.Y = this.Коллайдер.Измененная_Позиция_Y
            + (Точка_Верх || 0)
    }

    Коллайдер_Показать(Цвет = "black") {
        this.Контекст.beginPath()

        this.Контекст.globalAlpha = 1
        this.Контекст.strokeStyle = Цвет
        if (this.Коллайдер.Радиус)
            this.Контекст.stroke()
        else {
            this.Контекст.save()
            this.Контекст.translate(this.Коллайдер.Позиция.X + this.Коллайдер.Ширина / 2, this.Коллайдер.Позиция.Y + this.Высота / 2)
            this.Контекст.rotate(this.Угол_В_Радианах)
            this.Контекст.lineWidth = 1
            this.Контекст.strokeRect(this.Коллайдер.Ширина / -2, this.Коллайдер.Высота / -2, this.Коллайдер.Ширина, this.Коллайдер.Высота)
        }
        this.Контекст.restore()
        this.Контекст.closePath()
    }

    Клик() {
        let Объект = new Path2D
        if (this.Коллайдер_Изменен) {
            if (this.Коллайдер.Ширина && this.Коллайдер.Высота)
                Объект.rect(this.Коллайдер.Позиция.X, this.Коллайдер.Позиция.Y, this.Коллайдер.Ширина, this.Коллайдер.Высота)
            else if (this.Радиус)
                Объект.arc(this.Коллайдер.Позиция.X, this.Коллайдер.Позиция.Y, this.Коллайдер.Радиус, 0, 2 * Math.PI)
        } else {
            if (this.Ширина && this.Высота)
                Объект.rect(this.#Позиция_По_X, this.#Позиция_По_Y, this.Ширина, this.Высота)
            else if (this.Радиус)
                Объект.arc(this.#Позиция_По_X, this.#Позиция_По_Y, this.Радиус, 0, 2 * Math.PI)
        }
        return Объект
    }

    Мышь_Нажата() {

        if (this.Угол_В_Градусах !== 0) {
            this.Коллайдер_Добавить()
            if (Столкновение_Определить(this, Мышь)) {
                return true
            }
            return
        }

        let Блок_Активный = this.Клик()
        let Блок_Выбранный = this.Контекст.isPointInPath(
            Блок_Активный,
            Мышь.Позиция.X,
            Мышь.Позиция.Y
        )
        return Блок_Выбранный
    }

    Действие_При_Нажатии() { }
    Действие_При_Отжатии() { }
    Действие_При_Наведении() { }

    Центр_Получить() {
        if (this.Радиус) {
            return
        }
        return {
            Позиция: new Позиция(this.Позиция.X + this.Ширина / 2, this.Позиция.Y + this.Высота / 2)
        }
    }

    Обновить() {
        this.Позиция.X += this.Скорость_По_X
        this.Позиция.Y += this.Скорость_По_Y

        this.#Позиция_По_X = this.Позиция.X
        this.#Позиция_По_Y = this.Позиция.Y

        if (this.Якорь) {
            this.#Позиция_По_X = this.Позиция.X - (this.Ширина * this.Якорь)
            this.#Позиция_По_Y = this.Позиция.Y - (this.Высота * this.Якорь)
            this.#Смещение_По_X = this.Позиция.X - this.#Позиция_По_X
            this.#Смещение_По_Y = this.Позиция.Y - this.#Позиция_По_Y
        }

        if (this.Тень) {
            this.Контекст.shadowColor = this.Цвет_Тени
            this.Контекст.shadowOffsetX = this.Смещение_Тени_По_X
            this.Контекст.shadowOffsetY = this.Смещение_Тени_По_Y
            this.Контекст.shadowBlur = this.Тень_Размытие
        } else {
            this.Контекст.shadowColor = ""
            this.Контекст.shadowOffsetX = 0
            this.Контекст.shadowOffsetY = 0
            this.Контекст.shadowBlur = 0
        }

        this.Контекст.setLineDash([])

        if (this.Угол_В_Градусах !== 0) {
            this.Угол_В_Радианах = this.Угол_В_Градусах * (Math.PI / 180)
        }

        if (!this.Коллайдер) {
            return
        }
        this.Коллайдер_Обновлять()
    }
}

class Квадрат extends Объект {
    constructor({
        Позиция_X = 0,
        Позиция_Y = 0,
        Ширина = 20,
        Высота = 20,
        Цвет = "black",
        Скорость_По_X = 0,
        Скорость_По_Y = 0,
        Твердое_Тело = false,
        Цвет_Тени = "black",
        Смещение_Тени_По_X = 5,
        Смещение_Тени_По_Y = 5,
        Угол_В_Радианах = 0,
        Обводка = false,
        Толщина_Линии_Обводки = 2,
        Цвет_Обводки = "black",
        Прозрачность = 1,
        Тень = false,
        Тень_Размытие = 0,
        п_Контекст = Контекст,
        Тег = "",
        Вращение = false,
        Скорость_Вращения = 1,
        Закргулить_Углы = false,
        Радиус_Углов = 20,
        Якорь,
        Угол_В_Градусах = 0,
        Только_Обводка = false
    }) {
        super({
            Позиция_X, Позиция_Y, Скорость_По_X, Скорость_По_Y, п_Контекст, Тег, Тень, Цвет_Тени,
            Смещение_Тени_По_X, Смещение_Тени_По_Y, Тень_Размытие,
            Якорь
        })
        this.Ширина = Ширина
        this.Высота = Высота
        this.Цвет = Цвет
        this.Твердое_Тело = Твердое_Тело
        this.Индекс_Точки_Пути = 0
        this.Центр_Объекта = {
            Позиция: new Позиция(this.Позиция.X + this.Ширина / 2, this.Позиция.Y + this.Высота / 2)
        }
        this.Угол_В_Радианах = Угол_В_Радианах
        this.Обводка = Обводка
        this.Толщина_Линии_Обводки = Толщина_Линии_Обводки
        this.Цвет_Обводки = Цвет_Обводки
        this.Прозрачность = Прозрачность

        this.Вращение = Вращение
        this.Скорость_Вращения = Скорость_Вращения

        this.Закргулить_Углы = Закргулить_Углы
        this.Радиус_Углов = Радиус_Углов

        this.Угол_В_Градусах = Угол_В_Градусах

        this.Только_Обводка = Только_Обводка
    }

    Закргулить_Углы_Квадрат(Позиция_X, Позиция_Y, Ширина, Высота, Радиус) {
        Радиус = (Math.min(Ширина, Высота) / 2 > Радиус) ? Радиус : Math.min(Ширина, Высота) / 2
        return `M ${Позиция_X + Радиус} ${Позиция_Y} l ${Ширина - 2 * Радиус} 0 q ${Радиус} 0 ${Радиус} ${Радиус}
            l 0 ${Высота - 2 * Радиус} q 0 ${Радиус} ${-Радиус} ${Радиус}
            l ${-Ширина + 2 * Радиус} 0 q ${-Радиус} 0 ${-Радиус} ${-Радиус}
            l 0 ${-Высота + 2 * Радиус} q 0 ${-Радиус} ${Радиус} ${-Радиус}`
    }

    Отрисовать() {
        this.Контекст.beginPath()

        if (this.Вращение) {
            this.Вращать()
        }

        if (this.Угол_В_Градусах !== 0) {
            this.Контекст.save()
            this.Контекст.translate(this._Позиция_По_X + this._Смещение_По_X, this._Позиция_По_Y + this._Смещение_По_Y)
            this.Контекст.rotate(this.Угол_В_Радианах)
            this.Контекст.translate(-(this._Позиция_По_X + this._Смещение_По_X), -(this._Позиция_По_Y + this._Смещение_По_Y))
        }
        this.Контекст.globalAlpha = this.Прозрачность

        if (this.Обводка) {
            this.Контекст.lineWidth = this.Толщина_Линии_Обводки
            this.Контекст.strokeStyle = this.Цвет_Обводки
            if (this.Закргулить_Углы) {
                this.Контекст.stroke(new Path2D(this.Закргулить_Углы_Квадрат(this._Позиция_По_X, this._Позиция_По_Y, this.Ширина, this.Высота, this.Радиус_Углов)))
            } else {
                this.Контекст.strokeRect(this._Позиция_По_X, this._Позиция_По_Y, this.Ширина, this.Высота)
            }

            if (this.Только_Обводка) {
                return
            }
        }
        this.Контекст.fillStyle = this.Цвет

        if (this.Закргулить_Углы) {
            this.Контекст.fill(new Path2D(this.Закргулить_Углы_Квадрат(this._Позиция_По_X, this._Позиция_По_Y, this.Ширина, this.Высота, this.Радиус_Углов)))
        } else {
            this.Контекст.fillRect(this._Позиция_По_X, this._Позиция_По_Y, this.Ширина, this.Высота)
        }

        this.Контекст.restore()
        this.Контекст.closePath()
    }

    Обновить() {
        super.Обновить()
        this.Отрисовать()
        return this
    }

    Вращать() {
        this.Угол_В_Градусах = this.Угол_В_Градусах >= 360 ? 0 : this.Угол_В_Градусах += this.Скорость_Вращения
    }

    Перемещение_По_Точкам(Точки_Пути) {
        this.Отрисовать()
        let Точка_Пути = Точки_Пути[this.Индекс_Точки_Пути]
        let Дистанция_До_Точки_X = Точка_Пути.Позиция.X - this.Центр_Объекта.Позиция.X
        let Дистанция_До_Точки_Y = Точка_Пути.Позиция.Y - this.Центр_Объекта.Позиция.Y
        let Угол_В_Радианах = Math.atan2(Дистанция_До_Точки_Y, Дистанция_До_Точки_X)
        this.Позиция.X += Math.cos(Угол_В_Радианах)
        this.Позиция.Y += Math.sin(Угол_В_Радианах)
        this.Центр_Объекта.Позиция.X = this._Позиция_По_X + this.Ширина / 2
        this.Центр_Объекта.Позиция.Y = this._Позиция_По_Y + this.Высота / 2

        if (Math.round(this.Центр_Объекта.Позиция.X) === Math.round(Точка_Пути.Позиция.X) &&
            Math.round(this.Центр_Объекта.Позиция.Y) === Math.round(Точка_Пути.Позиция.Y)
        ) {
            if (this.Индекс_Точки_Пути < Точки_Пути.length - 1) {
                this.Индекс_Точки_Пути++
            } else {
                this.Индекс_Точки_Пути = 0
            }
        }
    }
}

class Круг extends Объект {
    constructor({
        Позиция_X,
        Позиция_Y,
        Скорость_По_X = 0,
        Скорость_По_Y = 0,
        Радиус = 10,
        Цвет = "black",
        Твердое_Тело = false,
        Обводка = false,
        Толщина_Линии_Обводки = 1,
        Цвет_Обводки = "black",
        Прозрачность = 1,
        Тень = false,
        Тень_Размытие = false,
        Цвет_Тени = "black",
        Смещение_Тени_По_X = 5,
        Смещение_Тени_По_Y = 5,
        п_Контекст = Контекст,
        Тег = "",
        Только_Обводка = false
    }) {
        super({ Позиция_X, Позиция_Y, Скорость_По_X, Скорость_По_Y, п_Контекст, Тег, Тень, Цвет_Тени, Смещение_Тени_По_X, Смещение_Тени_По_Y, Тень_Размытие, })

        this.Радиус = Радиус
        this.Цвет = Цвет
        this.Твердое_Тело = Твердое_Тело
        this.Обводка = Обводка
        this.Толщина_Линии_Обводки = Толщина_Линии_Обводки
        this.Цвет_Обводки = Цвет_Обводки
        this.Прозрачность = Прозрачность
        this.Начальный_Радиус = this.Радиус
        this.Только_Обводка = Только_Обводка
    }

    Отрисовать() {
        this.Контекст.beginPath()

        if (this.Радиус < 0) {
            console.log("Радиус меньше 0")
            this.Радиус = 0
        }

        if (this.Обводка) {
            this.Контекст.lineWidth = this.Толщина_Линии_Обводки
            this.Контекст.strokeStyle = this.Цвет_Обводки
            this.Контекст.arc(this._Позиция_По_X, this._Позиция_По_Y, this.Радиус, 0, 2 * Math.PI)
            this.Контекст.stroke()
            if (this.Только_Обводка) {
                return
            }
        }

        this.Контекст.globalAlpha = this.Прозрачность
        this.Контекст.fillStyle = this.Цвет
        this.Контекст.arc(this._Позиция_По_X, this._Позиция_По_Y, this.Радиус, 0, 2 * Math.PI)
        this.Контекст.fill()
        this.Контекст.restore()
        this.Контекст.closePath()
    }

    Цвет_Изменить(Цвет) {
        this.Контекст.fillStyle = Цвет
    }

    Обновить() {
        super.Обновить()
        this.Отрисовать()
        return this
    }
}

class Спрайт extends Объект {
    constructor({
        Позиция_X = 0,
        Позиция_Y = 0,
        Масштаб = 1,
        Смещение_Спрайта_По_X = 0,
        Смещение_Спрайта_По_Y = 0,
        Скорость_По_X = 0,
        Скорость_По_Y = 0,
        Угол_В_Радианах = 0,
        Угол_В_Градусах = 0,
        Прозрачность = 1,
        Смена_Цвета = false,
        п_Контекст = Контекст,
        Родительский_Объект = "",
        Картинка = "",
        Тень = false,
        Цвет_Тени = "black",
        Смещение_Тени_По_X = 5,
        Смещение_Тени_По_Y = 5,
        Тень_Размытие = 0,
        Обводка = false,
        Толщина_Линии_Обводки = 10,
        Цвет_Обводки = "black",
        Якорь = 0,
        Вращение = false,
    }) {
        super({
            Позиция_X, Позиция_Y, Скорость_По_X, Скорость_По_Y, Угол_В_Радианах, Угол_В_Градусах,
            п_Контекст, Тень, Цвет_Тени, Смещение_Тени_По_X, Смещение_Тени_По_Y, Тень_Размытие,
            Якорь,
        })

        this.Картинка = Картинка

        this.Масштаб = Масштаб

        this.Ширина = this.Картинка.width * this.Масштаб
        this.Высота = this.Картинка.height * this.Масштаб

        this.Смещение_Спрайта_По_X = Смещение_Спрайта_По_X
        this.Смещение_Спрайта_По_Y = Смещение_Спрайта_По_Y
        this.Индекс_Точки_Пути = 0
        this.Центр_Объекта = {
            Позиция: new Позиция(this.Позиция.X + this.Ширина / 2, this.Позиция.Y + this.Высота / 2)
        }
        this.Прозрачность = Прозрачность
        this.Смена_Цвета = Смена_Цвета
        this.Родительский_Объект = Родительский_Объект

        this.Вращение = Вращение
        this.Скорость_Вращения = 1

        this.Тень = Тень
        this.Цвет_Тени = Цвет_Тени
        this.Смещение_Тени_По_X = Смещение_Тени_По_X
        this.Смещение_Тени_По_Y = Смещение_Тени_По_Y
        this.Тень_Размытие = Тень_Размытие

        this.Обводка = Обводка
        this.Толщина_Линии_Обводки = Толщина_Линии_Обводки
        this.Цвет_Обводки = Цвет_Обводки

        this.Угол_В_Градусах = Угол_В_Градусах
    }

    Поменять_Спрайт(Картинка) {
        this.Картинка = Картинка
    }

    Повернуть(Градусы) {
        this.Угол_В_Градусах = Градусы
        return this
    }

    Вращать() {
        this.Угол_В_Градусах = this.Угол_В_Градусах >= 360 ? 0 : this.Угол_В_Градусах += this.Скорость_Вращения
    }

    Отрисовать() {
        this.Контекст.globalAlpha = this.Прозрачность

        if (this.Вращение) {
            this.Вращать()
        }

        if (this.Угол_В_Радианах !== 0) {
            this.Контекст.save()
            this.Контекст.translate(this._Позиция_По_X + this._Смещение_По_X, this._Позиция_По_Y + this._Смещение_По_Y)
            this.Контекст.rotate(this.Угол_В_Радианах)
            this.Контекст.translate(-(this._Позиция_По_X + this._Смещение_По_X), -(this._Позиция_По_Y + this._Смещение_По_Y))
        }

        this.Ширина = this.Картинка.width * this.Масштаб
        this.Высота = this.Картинка.height * this.Масштаб

        this.Контекст.drawImage(
            this.Картинка,
            this._Позиция_По_X,
            this._Позиция_По_Y,
            this.Ширина,
            this.Высота,
        )
        this.Контекст.restore()

        if (this.Обводка) {
            this.Контекст.lineWidth = this.Толщина_Линии_Обводки
            this.Контекст.strokeStyle = this.Цвет_Обводки
            if (this.Угол_В_Градусах != 0 || this.Угол_В_Радианах !== 0) {
                this.Контекст.save()
                this.Контекст.translate(this._Позиция_По_X + this._Смещение_По_X, this._Позиция_По_Y + this._Смещение_По_Y)
                this.Контекст.rotate(this.Угол_В_Радианах)
                this.Контекст.translate(-(this._Позиция_По_X + this._Смещение_По_X), -(this._Позиция_По_Y + this._Смещение_По_Y))
                this.Контекст.strokeRect(this._Позиция_По_X, this._Позиция_По_Y, this.Ширина, this.Высота)
                this.Контекст.restore()
                return
            }
            this.Контекст.strokeRect(this._Позиция_По_X, this._Позиция_По_Y, this.Ширина, this.Высота)
        }
    }

    Обновить() {
        super.Обновить()
        this.Отрисовать()
        this.Центр_Объекта.Позиция.X = this._Позиция_По_X + this.Ширина / 2
        this.Центр_Объекта.Позиция.Y = this._Позиция_По_Y + this.Высота / 2
    }

    Вращать_За_Объектом(Объект, Камера = false) {
        if (!Камера) {
            if (!Объект.Радиус) {
                this.Угол_В_Радианах = Math.atan2((this.Позиция.Y) - (Объект.Позиция.Y + Объект.Высота / 2), (this.Позиция.X) - (Объект.Позиция.X + Объект.Ширина / 2))
            } else {
                this.Угол_В_Радианах = Math.atan2((this.Позиция.Y + this.Высота / 2) - (Объект.Позиция.Y + Объект.Радиус / 2), (this.Позиция.X + this.Ширина / 2) - (Объект.Позиция.X + Объект.Радиус / 2))
            }
        } else {
            this.Угол_В_Радианах = Округление_Числа(Math.atan2(540 - (Объект.Позиция.Y + Объект.Высота / 2), 956 - (Объект.Позиция.X + Объект.Ширина / 2)), 4)
        }
        this.Контекст.restore()
    }

    Повторять_Спрайт({ Позиция_X, Позиция_Y, Ширина, Высота, Смещение_По_X, Смещение_По_Y }) {
        let Паттерн = this.Контекст.createPattern(this.Картинка, 'repeat')
        let Матрица = new DOMMatrix([1, 0, 0, 1, 0, 0])
        Паттерн.setTransform(Матрица.translate(Смещение_По_X, Смещение_По_Y))
        this.Контекст.fillStyle = Паттерн
        this.Контекст.fillRect(Позиция_X, Позиция_Y, Ширина, Высота)
    }

    Перемещение_По_Точкам(Точки_Пути, Скорость) {
        let Точка_Пути = Точки_Пути[this.Индекс_Точки_Пути]
        let Дистанция_До_Точки_X = Точка_Пути.Позиция.X - this.Центр_Объекта.Позиция.X
        let Дистанция_До_Точки_Y = Точка_Пути.Позиция.Y - this.Центр_Объекта.Позиция.Y
        let Угол_В_Радианах = Math.atan2(Дистанция_До_Точки_Y, Дистанция_До_Точки_X)
        this.Позиция.X += Math.cos(Угол_В_Радианах) * Скорость
        this.Позиция.Y += Math.sin(Угол_В_Радианах) * Скорость
        this.Центр_Объекта.Позиция.X = this.Позиция.X + this.Ширина / 2
        this.Центр_Объекта.Позиция.Y = this.Позиция.Y + this.Высота / 2

        if (Math.round(this.Центр_Объекта.Позиция.X) === Math.round(Точка_Пути.Позиция.X) &&
            Math.round(this.Центр_Объекта.Позиция.Y) === Math.round(Точка_Пути.Позиция.Y) &&
            this.Индекс_Точки_Пути < Точки_Пути.length - 1) {
            this.Индекс_Точки_Пути++
        }
    }

    Следовать_За_Объектом(Объект, Скорость) {
        this.Направление_По_X = Объект._Позиция_По_X - this._Позиция_По_X
        this.Направление_По_Y = Объект._Позиция_По_Y - this._Позиция_По_Y
        this.Дистанция = Math.sqrt((this.Направление_По_X * this.Направление_По_X) + (this.Направление_По_Y * this.Направление_По_Y))
        this.Скорость_По_X = (this.Направление_По_X / this.Дистанция) * Скорость
        this.Скорость_По_Y = (this.Направление_По_Y / this.Дистанция) * Скорость
    }

    Маска_Применить({ Позиция_X = 0, Позиция_Y = 0, Ширина = this.Ширина, Высота = this.Высота, Радиус_Углов = 0,
        Обводка = false, Толщина_Обводки = 5, Цвет_Обводки = "black",
        Тень = false, Смещение_Тени_По_X = 5, Смещение_Тени_По_Y = 5, Цвет_Тени = "black", Тень_Размытие = 0
    }) {
        this.Маска = {}
        this.Маска.Позиция = new Позиция(Позиция_X, Позиция_Y)
        this.Маска.Ширина = Ширина
        this.Маска.Высота = Высота
        this.Маска.Радиус_Углов = Радиус_Углов
        this.Маска.Обводка = Обводка
        this.Маска.Толщина_Обводки = Толщина_Обводки
        this.Маска.Цвет_Обводки = Цвет_Обводки
        this.Маска.Тень = Тень
        this.Маска.Смещение_Тени_По_X = Смещение_Тени_По_X
        this.Маска.Смещение_Тени_По_Y = Смещение_Тени_По_Y
        this.Маска.Цвет_Тени = Цвет_Тени
        this.Маска.Тень_Размытие = Тень_Размытие
        return this
    }

    Обновить_С_Маской() {
        if (!this.Маска) {
            return
        }
        this.Контекст.save()
        this.Контекст.beginPath()
        this.Контекст.roundRect(this._Позиция_По_X + this.Маска.Позиция.X, this._Позиция_По_Y + this.Маска.Позиция.Y, this.Маска.Ширина, this.Маска.Высота, [this.Маска.Радиус_Углов])

        if (this.Маска.Обводка) {
            this.Контекст.lineWidth = this.Маска.Толщина_Обводки
            this.Контекст.strokeStyle = this.Маска.Цвет_Обводки
            this.Контекст.stroke()
        }

        if (this.Тень) {
            this.Контекст.shadowColor = this.Цвет_Тени
            this.Контекст.shadowOffsetX = this.Смещение_Тени_По_X
            this.Контекст.shadowOffsetY = this.Смещение_Тени_По_Y
            this.Контекст.shadowBlur = this.Тень_Размытие
        } else {
            this.Контекст.shadowColor = ""
            this.Контекст.shadowOffsetX = 0
            this.Контекст.shadowOffsetY = 0
            this.Контекст.shadowBlur = 0
        }
        this.Контекст.globalAlpha = 0
        this.Контекст.fill()
        this.Контекст.clip()
        this.Обновить()
        this.Контекст.restore()
    }
}

class Атлас extends Объект {
    constructor({
        Позиция_X,
        Позиция_Y,
        Масштаб = 1,
        Скорость_По_X = 0,
        Скорость_По_Y = 0,
        Максимум_Кадров = "",
        Скорость_Смены_Кадра = 7,
        Смещение_Спрайта_По_X = 0,
        Смещение_Спрайта_По_Y = 0,
        Спрайты = {},
        Угол_В_Градусах = 0,
        Прозрачность = 1,
        п_Контекст = Контекст,
        Тег = "",
        Картинка = "",
        Тень = false,
        Цвет_Тени = "black",
        Смещение_Тени_По_X = 5,
        Смещение_Тени_По_Y = 5,
        Тень_Размытие = 0,
        Зеркально = false,
        Вращение = false,
        Якорь,
    }) {
        super({
            Позиция_X, Позиция_Y, Скорость_По_X, Скорость_По_Y, Угол_В_Градусах, п_Контекст, Тег, Тень,
            Цвет_Тени, Смещение_Тени_По_X, Смещение_Тени_По_Y, Тень_Размытие, Якорь
        })
        this.Картинка = Картинка
        this.Максимум_Кадров = Максимум_Кадров || (this.Картинка.width) / this.Картинка.height
        this.Ширина = (this.Картинка.width) / this.Максимум_Кадров
        this.Высота = this.Картинка.height
        this.Масштаб = Масштаб
        this.Текущий_Кадр = 0
        this.Прошедший_Кадр = 0
        this.Скорость_Смены_Кадра = Скорость_Смены_Кадра
        this.Смещение_Спрайта_По_X = Смещение_Спрайта_По_X
        this.Смещение_Спрайта_По_Y = Смещение_Спрайта_По_Y
        this.Индекс_Точки_Пути = 0
        this.Прозрачность = Прозрачность
        this.Центр_Объекта = {
            Позиция: new Позиция(this.Позиция.X + this.Ширина / 2, this.Позиция.Y + this.Высота / 2)
        }
        this.Спрайты = Спрайты
        this.Зеркально = Зеркально

        this.Тень = Тень
        this.Цвет_Тени = Цвет_Тени
        this.Смещение_Тени_По_X = Смещение_Тени_По_X
        this.Смещение_Тени_По_Y = Смещение_Тени_По_Y
        this.Тень_Размытие = Тень_Размытие

        this.Скорость_Вращения = 1
        this.Вращение = Вращение

        this.Угол_В_Градусах = 0
        this.Угол_В_Радианах = 0
    }

    Вращать() {
        this.Угол_В_Градусах = this.Угол_В_Градусах >= 360 ? 0 : this.Угол_В_Градусах += this.Скорость_Вращения
    }

    Отрисовать() {
        this.Контекст.globalAlpha = this.Прозрачность

        if (this.Вращение) {
            this.Вращать()
        }

        if (this.Угол_В_Градусах != 0) {
            this.Контекст.save()
            this.Контекст.translate(this._Позиция_По_X + this._Смещение_По_X, this._Позиция_По_Y + this._Смещение_По_Y)
            this.Контекст.rotate(this.Угол_В_Радианах)
            this.Контекст.translate(-(this._Позиция_По_X + this._Смещение_По_X), -(this._Позиция_По_Y + this._Смещение_По_Y))
        }

        this.Контекст.drawImage(
            this.Картинка,
            this.Текущий_Кадр * (this.Картинка.width / this.Максимум_Кадров),
            0,
            this.Картинка.width / this.Максимум_Кадров,
            this.Картинка.height,
            this._Позиция_По_X - this.Смещение_Спрайта_По_X,
            this._Позиция_По_Y - this.Смещение_Спрайта_По_Y,
            (this.Картинка.width / this.Максимум_Кадров),
            this.Картинка.height)

        this.Контекст.restore()
    }

    Кадр_Сменить() {
        if (!this.Зеркально) {
            this.Прошедший_Кадр++
            if (this.Прошедший_Кадр % this.Скорость_Смены_Кадра === 0) {
                if (this.Текущий_Кадр < this.Максимум_Кадров - 1) {
                    this.Текущий_Кадр++
                } else {
                    this.Текущий_Кадр = 0
                }
            }
        } else {
            this.Прошедший_Кадр++
            if (this.Прошедший_Кадр % this.Скорость_Смены_Кадра === 0) {
                if (this.Текущий_Кадр > 0) {
                    this.Текущий_Кадр--
                } else {
                    this.Текущий_Кадр = this.Максимум_Кадров - 1
                }
            }
        }
    }

    Обновить() {
        super.Обновить()
        this.Отрисовать()
        this.Кадр_Сменить()
        this.Центр_Объекта.Позиция.X = this._Позиция_По_X + this.Ширина / 2
        this.Центр_Объекта.Позиция.Y = this._Позиция_По_Y + this.Высота / 2
    }

    Следовать_За_Объектом(Объект, Скорость) {
        this.Направление_По_X = Объект._Позиция_По_X - this._Позиция_По_X
        this.Направление_По_Y = Объект._Позиция_По_Y - this._Позиция_По_Y
        this.Дистанция = Math.sqrt((this.Направление_По_X * this.Направление_По_X) + (this.Направление_По_Y * this.Направление_По_Y))
        this.Скорость_По_X = (this.Направление_По_X / this.Дистанция) * Скорость
        this.Скорость_По_Y = (this.Направление_По_Y / this.Дистанция) * Скорость

        if (this._Позиция_По_X == Объект._Позиция_По_X && this._Позиция_По_Y == Объект._Позиция_По_Y) {
            this.Скорость_По_X = 0
            this.Скорость_По_Y = 0
        }
    }

    Установить_Анимацию(Состояние_Объекта) {
        if (this.Картинка !== this.Спрайты[Состояние_Объекта].Картинка) {
            this.Картинка = this.Спрайты[Состояние_Объекта].Картинка
            this.Максимум_Кадров = this.Спрайты[Состояние_Объекта].Максимум_Кадров
            this.Скорость_Смены_Кадра = !this.Спрайты[Состояние_Объекта].Скорость_Смены_Кадра ? 7 : this.Спрайты[Состояние_Объекта].Скорость_Смены_Кадра
            this.Текущий_Кадр = !this.Спрайты[Состояние_Объекта].Зеркально ? 0 : this.Спрайты[Состояние_Объекта].Максимум_Кадров - 1
        }
    }

    Маска_Применить({ Позиция_X = 0, Позиция_Y = 0, Ширина = this.Ширина, Высота = this.Высота, Радиус_Углов = 0, Обводка = true }) {
        this.Маска = {}
        this.Маска.Позиция = new Позиция(Позиция_X, Позиция_Y)
        this.Маска.Ширина = Ширина
        this.Маска.Высота = Высота
        this.Маска.Радиус_Углов = Радиус_Углов
        this.Маска.Обводка = Обводка
        return this
    }

    Обновить_С_Маской() {
        if (!this.Маска) {
            return
        }
        this.Контекст.save()
        this.Контекст.beginPath()
        this.Контекст.roundRect(this._Позиция_По_X + this.Маска.Позиция.X, this._Позиция_По_Y + this.Маска.Позиция.Y, this.Маска.Ширина, this.Маска.Высота, [this.Маска.Радиус_Углов])
        if (this.Маска.Обводка)
            this.Контекст.stroke()
        this.Контекст.globalAlpha = 0
        this.Контекст.fill()
        this.Контекст.clip()
        this.Обновить()
        this.Контекст.restore()
    }
}

let Звуки_Созданные = []

class Аудио {
    constructor({ Аудио, Громкость = 1, Повторять = false }) {
        this.Аудио = Аудио
        if (!this.Аудио) {
            console.log("Ошибка Аудио")
        }
        this.Активен = false
        this.Громкость = Громкость
        if (Аудио_Контекст) {
            this.Узел_Усиления = Аудио_Контекст.createGain()
            this.Узел_Усиления.connect(Аудио_Контекст.destination)
            this.Узел_Усиления.gain.value = this.Громкость
        }
        this.Повторять = Повторять
        this.Мут = false
        Звуки_Созданные.push(this)
        this.Запущен = false
    }

    Запустить() {
        this.Запущен = true

        if (!Аудио_Контекст || !Буффер_Создан) {
            return
        }

        if (!this.Узел_Усиления) {
            this.Узел_Усиления = Аудио_Контекст.createGain()
            this.Узел_Усиления.connect(Аудио_Контекст.destination)
            this.Узел_Усиления.gain.value = this.Громкость
        }
        if (this.Активен) {
            return
        }
        Аудио_Контекст.resume().then(() => {
            this.Источник = Аудио_Контекст.createBufferSource()
            this.Источник.buffer = this.Аудио
            this.Источник.connect(this.Узел_Усиления)
            this.Источник.loop = this.Повторять
            this.Источник.start(0, 0)
            this.Источник.onended = () => this.Стоп()
            this.Активен = true
            this.Мут_Проверка()
        })
    }

    Мут_Проверка() {
        let п_Мут = this.Мут ? this.Громкость_Убрать() : this.Громкость_Восстановить()
    }

    Стоп() {
        this.Источник.stop(0)
        this.Активен = false
    }

    Мут_Включить() {
        this.Мут = true
        this.Громкость_Убрать()
    }

    Мут_Выключить() {
        this.Мут = false
        this.Громкость_Восстановить()
    }

    Громкость_Убрать() {
        if (!Аудио_Контекст || !this.Узел_Усиления)
            return
        this.Узел_Усиления.gain.setValueAtTime(0, Аудио_Контекст.currentTime)
    }

    Громкость_Восстановить() {
        if (!Аудио_Контекст || !this.Узел_Усиления)
            return
        if (this.Мут)
            return

        this.Узел_Усиления.gain.setValueAtTime(1, Аудио_Контекст.currentTime)
        this.Узел_Усиления.gain.value = this.Громкость
    }
}

document.addEventListener("visibilitychange", function () {
    if (document.hidden) {
        Звуки_Созданные.forEach(п_Элемент => {
            п_Элемент.Громкость_Убрать()
        })
    } else {
        Звуки_Созданные.forEach(п_Элемент => {
            п_Элемент.Громкость_Восстановить()
        })
    }
})

let Буффер_Создан = false

window.addEventListener('mousedown', function () {
    if (Аудио_Контекст)
        return

    Аудио_Контекст = new AudioContext()

    for (let и = 0; и != Аудио_Всего; и++) {
        let Имя = Массив_Аудио[и][0]
        let Путь = Массив_Аудио[и][1]

        window.fetch(Путь)
            .then(Ответ => Ответ.arrayBuffer())
            .then(Массив_Буффер => Аудио_Контекст.decodeAudioData(Массив_Буффер))
            .then(Аудио_Буффер => {
                for (let и = 0; и < Звуки_Созданные.length; и++) {
                    let п_Элемент = Звуки_Созданные[и]
                    if (п_Элемент.Аудио === Звуки[Имя]) {
                        п_Элемент.Аудио = Аудио_Буффер
                        if (п_Элемент.Запущен) {
                            setTimeout(() => {
                                п_Элемент.Запустить()
                            }, 500)
                        }
                    }
                }
                Звуки[Имя] = Аудио_Буффер
                Буффер_Создан = true
            })
    }
})

class Камера {
    constructor(Настройки = {}) {
        this.Дистанция = Настройки.Дистанция || 1000.0
        this.Направление = Настройки.Исходное_Положение || [1000, 370]
        this.Поле_Зрения = Настройки.Поле_Зрения || Math.PI / 4.0
        this.Окно_Камеры = {
            Лево: 0,
            Право: 0,
            Верх: 0,
            Низ: 0,
            Ширина: 0,
            Высота: 0,
            Масштаб: [Настройки.Масштаб_X || 1.0, Настройки.Масштаб_Y || 1.0]
        }
        this.Контекст = Контекст
        this.Создать()
    }

    Создать() {
        this.Обновить_Окно_Камеры()
    }

    Начать_Отрисовку() {
        this.Контекст.save()
        this.Применить_Масштаб()
        this.Применить_Перемещение()
    }

    Закончить_Отрисовку() {
        this.Контекст.restore()
    }

    Применить_Масштаб() {
        this.Контекст.scale(this.Окно_Камеры.Масштаб[0], this.Окно_Камеры.Масштаб[1])
    }

    Применить_Перемещение() {
        this.Контекст.translate(-this.Окно_Камеры.Лево, -this.Окно_Камеры.Верх)
    }

    Обновить_Окно_Камеры() {
        this.aspectRatio = this.Контекст.canvas.width / this.Контекст.canvas.height
        this.Окно_Камеры.Ширина = this.Дистанция * Math.tan(this.Поле_Зрения)
        this.Окно_Камеры.Высота = this.Окно_Камеры.Ширина / this.aspectRatio
        this.Окно_Камеры.Лево = this.Направление[0] - (this.Окно_Камеры.Ширина / 2)
        this.Окно_Камеры.Верх = this.Направление[1] - (this.Окно_Камеры.Высота / 2)
        this.Окно_Камеры.Право = this.Окно_Камеры.Лево + this.Окно_Камеры.Ширина
        this.Окно_Камеры.Низ = this.Окно_Камеры.Верх + this.Окно_Камеры.Высота
        this.Окно_Камеры.Масштаб[0] = this.Контекст.canvas.width / this.Окно_Камеры.Ширина
        this.Окно_Камеры.Масштаб[1] = this.Контекст.canvas.height / this.Окно_Камеры.Высота
    }

    Увеличить_До(z) {
        this.Дистанция = z * 1000
        this.Обновить_Окно_Камеры()
    }

    Следовать_За_Объектом({ Объект, Смещение_По_X = 0, Смещение_По_Y = 0, Ограничение_По_X, Ограничение_По_Y }) {
        if (Объект.Радиус) {
            if (!Ограничение_По_X)
                this.Направление[0] = (Объект.Позиция.X + Объект.Радиус) + Смещение_По_X
            if (!Ограничение_По_Y)
                this.Направление[1] = (Объект.Позиция.Y + Объект.Радиус) + Смещение_По_Y
        } else {
            if (!Ограничение_По_X)
                this.Направление[0] = (Объект.Позиция.X + Объект.Ширина / 2) + Смещение_По_X
            if (!Ограничение_По_Y)
                this.Направление[1] = (Объект.Позиция.Y + Объект.Высота / 2) + Смещение_По_Y
        }
        this.Обновить_Окно_Камеры()
    }

    Преобразить_Координаты_Экрана_В_Мировые_Координаты(Позиция_X, Позиция_Y, Объект) {
        Объект = Объект || {}
        Объект.x = (Позиция_X / this.Окно_Камеры.Масштаб[0]) + this.Окно_Камеры.Лево
        Объект.y = (Позиция_Y / this.Окно_Камеры.Масштаб[1]) + this.Окно_Камеры.Верх
        return Объект
    }

    Преобразить_Мировые_Координаты_В_Координаты_Экрана(Позиция_X, Позиция_Y, Объект) {
        Объект = Объект || {}
        Объект.x = (Позиция_X - this.Окно_Камеры.Лево) * (this.Окно_Камеры.Масштаб[0])
        Объект.y = (Позиция_Y - this.Окно_Камеры.Верх) * (this.Окно_Камеры.Масштаб[1])
        return Объект
    }
}

class Таблица {
    constructor({
        Данные = "",
        Позиция_X = 100,
        Позиция_Y = 100,
        Количество_Строк = 5,
        Количество_Колонок = 5,
        Ширина_Ячейки = 100,
        Высота_Ячейки = 100,
        Цвет_Тени = "",
        Смещение_Тени_По_X = 0,
        Смещение_Тени_По_Y = 0,
    }) {

        this.Данные = Данные
        this.Позиция = new Позиция(Позиция_X, Позиция_Y)
        this.Количество_Строк = Количество_Строк
        this.Количество_Колонок = Количество_Колонок
        this.Ширина_Ячейки = Ширина_Ячейки
        this.Высота_Ячейки = Высота_Ячейки
        this.Активные_Ячейки = []
        this.Активная_таблица
        this.Активировать_Ячейки = []
        this.Цвет_Тени = Цвет_Тени
        this.Смещение_Тени_По_X = Смещение_Тени_По_X
        this.Смещение_Тени_По_Y = Смещение_Тени_По_Y

        for (let и = 1; и < Object.entries(Данные).length + 1; и++) {
            this.Активировать_Ячейки[и] = new Path2D
            this.Активировать_Ячейки[и].rect(this.Позиция.X, this.Позиция.Y +
                (и * this.Высота_Ячейки), this.Ширина_Ячейки, this.Высота_Ячейки)
            this.Активные_Ячейки.push(this.Активировать_Ячейки[и])
        }
    }

    Таблица_Отрисовать() {
        this.Контекст.shadowColor = this.Цвет_Тени
        this.Контекст.shadowOffsetX = this.Смещение_Тени_По_X
        this.Контекст.shadowOffsetY = this.Смещение_Тени_По_Y

        for (let и = 1; и < Object.entries(this.Данные).length + 1; и++) {
            this.Активировать_Ячейки[и].rect(this.Позиция.X, this.Позиция.Y + (и * this.Высота_Ячейки), this.Ширина_Ячейки, this.Высота_Ячейки)
        }

        let Свойства_Имена = Object.keys(this.Данные[0])

        this.Активная_таблица = new Path2D
        this.Активная_таблица.rect(this.Позиция.X, this.Позиция.Y, this.Ширина_Ячейки * this.Количество_Колонок, this.Высота_Ячейки)

        for (let и = 0; и < this.Количество_Строк; и++) {
            for (let k = 0; k < this.Количество_Колонок; k++) {
                this.Контекст.fillStyle = "#f5f5f5"
                this.Контекст.fillRect(this.Позиция.X + (k * this.Ширина_Ячейки), this.Позиция.Y + (и * this.Высота_Ячейки), this.Ширина_Ячейки, this.Высота_Ячейки)
                this.Контекст.beginPath()
                this.Контекст.strokeStyle = "#716e77"
                this.Контекст.lineWidth = 3
                this.Контекст.strokeRect(this.Позиция.X + (k * this.Ширина_Ячейки), this.Позиция.Y + (и * this.Высота_Ячейки), this.Ширина_Ячейки, this.Высота_Ячейки)
                this.Контекст.closePath()
            }
        }

        let Граница_Ширина = (Object.entries(this.Данные[0]).length) * this.Ширина_Ячейки
        let Граница_Высота = (this.Данные.length + 1) * this.Высота_Ячейки

        for (let и = this.Высота_Ячейки * 2, Количество_Заполняемых_Строк = 0; и <= Граница_Высота; и += this.Высота_Ячейки) {
            for (let k = 0, Количество_Заполняемых_Столбцов = 0; k < Граница_Ширина; k += this.Ширина_Ячейки) {
                this.Контекст.font = "normal 16px Verdana"
                this.Контекст.fillStyle = "black"
                this.Контекст.fillText(
                    (this.Данные[Количество_Заполняемых_Строк])[Свойства_Имена[Количество_Заполняемых_Столбцов]],
                    this.Позиция.X + k + (this.Количество_Строк),
                    this.Позиция.Y + и - 10)
                ++Количество_Заполняемых_Столбцов
            }
            ++Количество_Заполняемых_Строк
        }
        for (let и = 0, Количество_Заполняемых_Столбцов = 0; и < Граница_Ширина; и += this.Ширина_Ячейки) {
            this.Контекст.font = "bold 16px Verdana"
            this.Контекст.fillStyle = "black"
            this.Контекст.fillText(Свойства_Имена[Количество_Заполняемых_Столбцов], this.Позиция.X + (this.Количество_Строк) + и, this.Позиция.Y + 25)
            ++Количество_Заполняемых_Столбцов
        }
    }
}

function Столкновение_Определить(п_Первый_Объект, п_Второй_Объект) {
    if (!п_Первый_Объект.Коллайдер || !п_Второй_Объект.Коллайдер) {
        console.log("Нету коллайдера")
        return
    }

    let Первый_Объект = п_Первый_Объект.Коллайдер
    let Второй_Объект = п_Второй_Объект.Коллайдер
    let Фигура = Первый_Объект.Радиус ? "Круг" : "Квадрат"


    switch (Фигура) {
        case "Квадрат":
            if (Второй_Объект.Радиус) {
                return Определить_Пересечение_Между_Кругом_И_Квадратом(Второй_Объект, Первый_Объект)

            } else {
                return Определить_Пересечение_Квадратов(Первый_Объект, Второй_Объект)
            }
        case "Круг":
            if (Второй_Объект.Радиус) {
                return Определить_Пересечение_Кругов(Первый_Объект, Второй_Объект)
            } else {
                return Определить_Пересечение_Между_Кругом_И_Квадратом(Первый_Объект, Второй_Объект)
            }
        default:
            console.log("Ошибка")
            break
    }
}

function Определить_Пересечение_Квадратов(Первый_Объект, Второй_Объект) {
    if (Первый_Объект.Угол_В_Радианах != 0 || Второй_Объект.Угол_В_Радианах != 0) {
        return Столкновение_Фигур_При_Вращении(Первый_Объект, Второй_Объект)
    }
    if (Второй_Объект.Позиция.X > Первый_Объект.Ширина + Первый_Объект.Позиция.X ||
        Первый_Объект.Позиция.X > Второй_Объект.Ширина + Второй_Объект.Позиция.X ||
        Второй_Объект.Позиция.Y > Первый_Объект.Высота + Первый_Объект.Позиция.Y ||
        Первый_Объект.Позиция.Y > Второй_Объект.Высота + Второй_Объект.Позиция.Y) {
        return false
    } else
        return true
}

// Определить пересечение квадратов при вращении
function Точки_Пересечения_Найти(Позиция_X_В_Центре_Объекта, Позиция_Y_В_Центре_Объекта, Позиция_X, Позиция_Y, Угол_В_Радианах) {
    let Направление_По_X = Позиция_X - Позиция_X_В_Центре_Объекта
    let Направление_По_Y = Позиция_Y - Позиция_Y_В_Центре_Объекта
    let Дистанция = Math.sqrt(Направление_По_X * Направление_По_X + Направление_По_Y * Направление_По_Y)
    let Исходный_Угол = Math.atan2(Направление_По_Y, Направление_По_X)
    let Вращение_По_X = Позиция_X_В_Центре_Объекта + Дистанция * Math.cos(Исходный_Угол + Угол_В_Радианах)
    let Вращение_По_Y = Позиция_Y_В_Центре_Объекта + Дистанция * Math.sin(Исходный_Угол + Угол_В_Радианах)
    return {
        Позиция: new Позиция(Вращение_По_X, Вращение_По_Y)
    }
}

function Получить_Координаты_Повернутой_Фигуры(Объект) {
    let Позиция_X_В_Центре_Объекта = Объект.Позиция.X + (Объект.Ширина / 2)
    let Позиция_Y_В_Центре_Объекта = Объект.Позиция.Y + (Объект.Высота / 2)

    let Точка_Верхняя_Левая = Точки_Пересечения_Найти(Позиция_X_В_Центре_Объекта, Позиция_Y_В_Центре_Объекта, Объект.Позиция.X, Объект.Позиция.Y, Объект.Угол_В_Радианах)
    let Точка_Верхняя_Правая = Точки_Пересечения_Найти(Позиция_X_В_Центре_Объекта, Позиция_Y_В_Центре_Объекта, Объект.Позиция.X + Объект.Ширина, Объект.Позиция.Y, Объект.Угол_В_Радианах)
    let Точка_Нижняя_Левая = Точки_Пересечения_Найти(Позиция_X_В_Центре_Объекта, Позиция_Y_В_Центре_Объекта, Объект.Позиция.X, Объект.Позиция.Y + Объект.Высота, Объект.Угол_В_Радианах)
    let Точка_Нижняя_Правая = Точки_Пересечения_Найти(Позиция_X_В_Центре_Объекта, Позиция_Y_В_Центре_Объекта, Объект.Позиция.X + Объект.Ширина, Объект.Позиция.Y + Объект.Высота, Объект.Угол_В_Радианах)

    return {
        Точка_Верхняя_Левая: Точка_Верхняя_Левая,
        Точка_Верхняя_Правая: Точка_Верхняя_Правая,
        Точка_Нижняя_Левая: Точка_Нижняя_Левая,
        Точка_Нижняя_Правая: Точка_Нижняя_Правая
    }
}

function Вершина_Фигуры(Позиция_X, Позиция_Y) {
    this.Позиция = new Позиция(Позиция_X, Позиция_Y)
}

function Многоугольник_Создать(Вершины, Ребра) {
    this.Вершины = Вершины
    this.Ребра = Ребра
}

function Обнаружение_Столкновений_С_Использованием_Теоремы_О_Разделяющей_Оси(Многоугольник_А, Многоугольник_Б) {
    let Линия_Перпендикуляра = null
    let Точка = 0
    let Перпендикуляры = []
    let Скалярное_Произведение_Минимальное_У_Многоугольника_А = null
    let Скалярное_Произведение_Максимальное_У_Многоугольника_А = null
    let Скалярное_Произведение_Минимальное_У_Многоугольника_Б = null
    let Скалярное_Произведение_Максимальное_У_Многоугольника_Б = null

    for (let и = 0; и < Многоугольник_А.Ребра.length; и++) {
        Линия_Перпендикуляра = new Вершина_Фигуры(-Многоугольник_А.Ребра[и].Позиция.Y,
            Многоугольник_А.Ребра[и].Позиция.X)
        Перпендикуляры.push(Линия_Перпендикуляра)
    }

    for (let и = 0; и < Многоугольник_Б.Ребра.length; и++) {
        Линия_Перпендикуляра = new Вершина_Фигуры(-Многоугольник_Б.Ребра[и].Позиция.Y,
            Многоугольник_Б.Ребра[и].Позиция.X)
        Перпендикуляры.push(Линия_Перпендикуляра)
    }

    for (let и = 0; и < Перпендикуляры.length; и++) {
        Скалярное_Произведение_Минимальное_У_Многоугольника_А = null
        Скалярное_Произведение_Максимальное_У_Многоугольника_А = null
        Скалярное_Произведение_Минимальное_У_Многоугольника_Б = null
        Скалярное_Произведение_Максимальное_У_Многоугольника_Б = null

        for (let j = 0; j < Многоугольник_А.Вершины.length; j++) {
            Точка = Многоугольник_А.Вершины[j].Позиция.X *
                Перпендикуляры[и].Позиция.X +
                Многоугольник_А.Вершины[j].Позиция.Y *
                Перпендикуляры[и].Позиция.Y

            if (Скалярное_Произведение_Максимальное_У_Многоугольника_А === null || Точка > Скалярное_Произведение_Максимальное_У_Многоугольника_А) {
                Скалярное_Произведение_Максимальное_У_Многоугольника_А = Точка
            }
            if (Скалярное_Произведение_Минимальное_У_Многоугольника_А === null || Точка < Скалярное_Произведение_Минимальное_У_Многоугольника_А) {
                Скалярное_Произведение_Минимальное_У_Многоугольника_А = Точка
            }
        }

        for (let j = 0; j < Многоугольник_Б.Вершины.length; j++) {
            Точка = Многоугольник_Б.Вершины[j].Позиция.X *
                Перпендикуляры[и].Позиция.X +
                Многоугольник_Б.Вершины[j].Позиция.Y *
                Перпендикуляры[и].Позиция.Y
            if (Скалярное_Произведение_Максимальное_У_Многоугольника_Б === null || Точка > Скалярное_Произведение_Максимальное_У_Многоугольника_Б) {
                Скалярное_Произведение_Максимальное_У_Многоугольника_Б = Точка
            }
            if (Скалярное_Произведение_Минимальное_У_Многоугольника_Б === null || Точка < Скалярное_Произведение_Минимальное_У_Многоугольника_Б) {
                Скалярное_Произведение_Минимальное_У_Многоугольника_Б = Точка
            }
        }

        if ((Скалярное_Произведение_Минимальное_У_Многоугольника_А <= Скалярное_Произведение_Максимальное_У_Многоугольника_Б && Скалярное_Произведение_Минимальное_У_Многоугольника_А >= Скалярное_Произведение_Минимальное_У_Многоугольника_Б) ||
            (Скалярное_Произведение_Минимальное_У_Многоугольника_Б <= Скалярное_Произведение_Максимальное_У_Многоугольника_А && Скалярное_Произведение_Минимальное_У_Многоугольника_Б >= Скалярное_Произведение_Минимальное_У_Многоугольника_А)) {
            continue
        }
        else {
            return false
        }
    }
    return true
}

function Столкновение_Фигур_При_Вращении(Первый_Объект, Второй_Объект) {
    let Фигура_А = Первый_Объект
    let Фигура_Б = Второй_Объект

    let Фигура_А_Координаты_XY = Получить_Координаты_Повернутой_Фигуры(Фигура_А)
    let Фигура_Б_Координаты_XY = Получить_Координаты_Повернутой_Фигуры(Фигура_Б)

    let Фигура_А_Вершины = [
        new Вершина_Фигуры(Фигура_А_Координаты_XY.Точка_Верхняя_Правая.Позиция.X, Фигура_А_Координаты_XY.Точка_Верхняя_Правая.Позиция.Y),
        new Вершина_Фигуры(Фигура_А_Координаты_XY.Точка_Нижняя_Правая.Позиция.X, Фигура_А_Координаты_XY.Точка_Нижняя_Правая.Позиция.Y),
        new Вершина_Фигуры(Фигура_А_Координаты_XY.Точка_Нижняя_Левая.Позиция.X, Фигура_А_Координаты_XY.Точка_Нижняя_Левая.Позиция.Y),
        new Вершина_Фигуры(Фигура_А_Координаты_XY.Точка_Верхняя_Левая.Позиция.X, Фигура_А_Координаты_XY.Точка_Верхняя_Левая.Позиция.Y),
    ]

    let Фигура_А_Ребра = [
        new Вершина_Фигуры(Фигура_А_Координаты_XY.Точка_Нижняя_Правая.Позиция.X - Фигура_А_Координаты_XY.Точка_Верхняя_Правая.Позиция.X, Фигура_А_Координаты_XY.Точка_Нижняя_Правая.Позиция.Y - Фигура_А_Координаты_XY.Точка_Верхняя_Правая.Позиция.Y),
        new Вершина_Фигуры(Фигура_А_Координаты_XY.Точка_Нижняя_Левая.Позиция.X - Фигура_А_Координаты_XY.Точка_Нижняя_Правая.Позиция.X, Фигура_А_Координаты_XY.Точка_Нижняя_Левая.Позиция.Y - Фигура_А_Координаты_XY.Точка_Нижняя_Правая.Позиция.Y),
        new Вершина_Фигуры(Фигура_А_Координаты_XY.Точка_Верхняя_Левая.Позиция.X - Фигура_А_Координаты_XY.Точка_Нижняя_Левая.Позиция.X, Фигура_А_Координаты_XY.Точка_Верхняя_Левая.Позиция.Y - Фигура_А_Координаты_XY.Точка_Нижняя_Левая.Позиция.Y),
        new Вершина_Фигуры(Фигура_А_Координаты_XY.Точка_Верхняя_Правая.Позиция.X - Фигура_А_Координаты_XY.Точка_Верхняя_Левая.Позиция.X, Фигура_А_Координаты_XY.Точка_Верхняя_Правая.Позиция.Y - Фигура_А_Координаты_XY.Точка_Верхняя_Левая.Позиция.Y)
    ]

    let Фигура_Б_Вершины = [
        new Вершина_Фигуры(Фигура_Б_Координаты_XY.Точка_Верхняя_Правая.Позиция.X, Фигура_Б_Координаты_XY.Точка_Верхняя_Правая.Позиция.Y),
        new Вершина_Фигуры(Фигура_Б_Координаты_XY.Точка_Нижняя_Правая.Позиция.X, Фигура_Б_Координаты_XY.Точка_Нижняя_Правая.Позиция.Y),
        new Вершина_Фигуры(Фигура_Б_Координаты_XY.Точка_Нижняя_Левая.Позиция.X, Фигура_Б_Координаты_XY.Точка_Нижняя_Левая.Позиция.Y),
        new Вершина_Фигуры(Фигура_Б_Координаты_XY.Точка_Верхняя_Левая.Позиция.X, Фигура_Б_Координаты_XY.Точка_Верхняя_Левая.Позиция.Y),
    ]

    let Фигура_Б_Ребра = [
        new Вершина_Фигуры(Фигура_Б_Координаты_XY.Точка_Нижняя_Правая.Позиция.X - Фигура_Б_Координаты_XY.Точка_Верхняя_Правая.Позиция.X, Фигура_Б_Координаты_XY.Точка_Нижняя_Правая.Позиция.Y - Фигура_Б_Координаты_XY.Точка_Верхняя_Правая.Позиция.Y),
        new Вершина_Фигуры(Фигура_Б_Координаты_XY.Точка_Нижняя_Левая.Позиция.X - Фигура_Б_Координаты_XY.Точка_Нижняя_Правая.Позиция.X, Фигура_Б_Координаты_XY.Точка_Нижняя_Левая.Позиция.Y - Фигура_Б_Координаты_XY.Точка_Нижняя_Правая.Позиция.Y),
        new Вершина_Фигуры(Фигура_Б_Координаты_XY.Точка_Верхняя_Левая.Позиция.X - Фигура_Б_Координаты_XY.Точка_Нижняя_Левая.Позиция.X, Фигура_Б_Координаты_XY.Точка_Верхняя_Левая.Позиция.Y - Фигура_Б_Координаты_XY.Точка_Нижняя_Левая.Позиция.Y),
        new Вершина_Фигуры(Фигура_Б_Координаты_XY.Точка_Верхняя_Правая.Позиция.X - Фигура_Б_Координаты_XY.Точка_Верхняя_Левая.Позиция.X, Фигура_Б_Координаты_XY.Точка_Верхняя_Правая.Позиция.Y - Фигура_Б_Координаты_XY.Точка_Верхняя_Левая.Позиция.Y)
    ]

    let Многоугольник_А = new Многоугольник_Создать(Фигура_А_Вершины, Фигура_А_Ребра)
    let Многоугольник_Б = new Многоугольник_Создать(Фигура_Б_Вершины, Фигура_Б_Ребра)

    if (Обнаружение_Столкновений_С_Использованием_Теоремы_О_Разделяющей_Оси(Многоугольник_А, Многоугольник_Б)) {
        return true
    } else {
        return false
    }
}

function Определить_Пересечение_Кругов(Первый_Объект, Второй_Объект) {
    let Дистанция_Между_Объектами = (Первый_Объект.Позиция.X - Второй_Объект.Позиция.X) *
        (Первый_Объект.Позиция.X - Второй_Объект.Позиция.X) +
        (Первый_Объект.Позиция.Y - Второй_Объект.Позиция.Y) *
        (Первый_Объект.Позиция.Y - Второй_Объект.Позиция.Y)
    return Дистанция_Между_Объектами <= ((Первый_Объект.Радиус + Второй_Объект.Радиус) *
        (Первый_Объект.Радиус + Второй_Объект.Радиус))
}

function Определить_Пересечение_Между_Кругом_И_Квадратом(Круг, Квадрат) {
    let Позиция_X = Круг.Позиция.X
    let Позиция_Y = Круг.Позиция.Y

    if (Квадрат.Угол_В_Радианах != 0) {
        return Столкновение_Круга_С_Прямоугольником_При_Вращении(Круг, Квадрат)
    }

    if (Круг.Позиция.X < Квадрат.Позиция.X) {
        Позиция_X = Квадрат.Позиция.X
    } else if (Круг.Позиция.X > Квадрат.Позиция.X + Квадрат.Ширина) {
        Позиция_X = Квадрат.Позиция.X + Квадрат.Ширина
    }
    if (Круг.Позиция.Y < Квадрат.Позиция.Y) {
        Позиция_Y = Квадрат.Позиция.Y
    } else if (Круг.Позиция.Y > Квадрат.Позиция.Y + Квадрат.Высота) {
        Позиция_Y = Квадрат.Позиция.Y + Квадрат.Высота
    }

    let Дистанция_По_X = Круг.Позиция.X - Позиция_X
    let Дистанция_По_Y = Круг.Позиция.Y - Позиция_Y
    let Дистанция = Math.sqrt(Дистанция_По_X * Дистанция_По_X + Дистанция_По_Y * Дистанция_По_Y)

    if (Дистанция < Круг.Радиус) {
        return true
    } else
        return false
}

const Дистанция_Между_Кругом_И_Прямоугольником_Найти = (Положение_Круга_По_X, Положение_Круга_По_Y, Ближайшая_Точка_По_X_Прямоугольника_К_Центру_Круга, Ближайшая_Точка_По_Y_Прямоугольника_К_Центру_Круга) => {
    const а = Math.abs(Положение_Круга_По_X - Ближайшая_Точка_По_X_Прямоугольника_К_Центру_Круга)
    const б = Math.abs(Положение_Круга_По_Y - Ближайшая_Точка_По_Y_Прямоугольника_К_Центру_Круга)
    return Math.sqrt((а * а) + (б * б))
}

function Столкновение_Круга_С_Прямоугольником_При_Вращении(Круг, Прямоугольник) {
    let Прямоугольник_Центр_Позиции_X = Прямоугольник.Позиция.X + Прямоугольник.Ширина / 2
    let Прямоугольник_Центр_Позиции_Y = Прямоугольник.Позиция.Y + Прямоугольник.Высота / 2
    // let Угол_В_Радианах = (Прямоугольник.Угол_В_Градусах) * (Math.PI / 180)
    const Положение_Круга_По_X = Math.cos(-Прямоугольник.Угол_В_Радианах) * (Круг.Позиция.X - Прямоугольник_Центр_Позиции_X) -
        Math.sin(-Прямоугольник.Угол_В_Радианах) * (Круг.Позиция.Y - Прямоугольник_Центр_Позиции_Y) + Прямоугольник_Центр_Позиции_X
    const Положение_Круга_По_Y = Math.sin(-Прямоугольник.Угол_В_Радианах) * (Круг.Позиция.X - Прямоугольник_Центр_Позиции_X) +
        Math.cos(-Прямоугольник.Угол_В_Радианах) * (Круг.Позиция.Y - Прямоугольник_Центр_Позиции_Y) + Прямоугольник_Центр_Позиции_Y

    let Ближайшая_Точка_По_X_Прямоугольника_К_Центру_Круга, Ближайшая_Точка_По_Y_Прямоугольника_К_Центру_Круга

    if (Положение_Круга_По_X < Прямоугольник.Позиция.X)
        Ближайшая_Точка_По_X_Прямоугольника_К_Центру_Круга = Прямоугольник.Позиция.X
    else if (Положение_Круга_По_X > Прямоугольник.Позиция.X + Прямоугольник.Ширина)
        Ближайшая_Точка_По_X_Прямоугольника_К_Центру_Круга = Прямоугольник.Позиция.X + Прямоугольник.Ширина
    else
        Ближайшая_Точка_По_X_Прямоугольника_К_Центру_Круга = Положение_Круга_По_X

    if (Положение_Круга_По_Y < Прямоугольник.Позиция.Y)
        Ближайшая_Точка_По_Y_Прямоугольника_К_Центру_Круга = Прямоугольник.Позиция.Y
    else if (Положение_Круга_По_Y > Прямоугольник.Позиция.Y + Прямоугольник.Высота)
        Ближайшая_Точка_По_Y_Прямоугольника_К_Центру_Круга = Прямоугольник.Позиция.Y + Прямоугольник.Высота
    else
        Ближайшая_Точка_По_Y_Прямоугольника_К_Центру_Круга = Положение_Круга_По_Y

    const Дистанция = Дистанция_Между_Кругом_И_Прямоугольником_Найти(Положение_Круга_По_X, Положение_Круга_По_Y, Ближайшая_Точка_По_X_Прямоугольника_К_Центру_Круга, Ближайшая_Точка_По_Y_Прямоугольника_К_Центру_Круга)
    if (Дистанция < Круг.Радиус)
        return true
    else
        return false
}

function Проверить_Коллизии_Между_Массивами(Первый_Массив, Второй_Массив) {
    let Первый_Объект
    let Второй_Объект

    for (let и = 0; и < Первый_Массив.length; и++) {
        Первый_Объект = Первый_Массив[и]
        for (let k = 0; k < Второй_Массив.length; k++) {
            Второй_Объект = Второй_Массив[k]
            if (Второй_Объект.Радиус) {
                if (Определить_Пересечение_Кругов(Первый_Объект, Второй_Объект)) {
                    return [и, k, Первый_Массив[и], Второй_Массив[k]]
                }
            } else {
                if (Определить_Пересечение_Между_Кругом_И_Квадратом(Первый_Объект, Второй_Объект)) {
                    return [и, k, Первый_Массив[и], Второй_Массив[k]]
                }
            }
        }
    }
}

function Действие_С_Объектом(Событие, Массив_Объектов, Объект) {
    switch (Событие) {
        case "Уничтожить":
            Массив_Объектов.splice(Объект, 1)
            break
        case "Покрасить":
            Объект.Цвет = "black"
            break
    }
}

function Объекты_В_Массиве_Обновить(Массив_Объектов, Параметр = null) {
    Массив_Объектов.forEach(Объект => {
        Объект.Обновить(Параметр)
    })
}

function Массив_Удалить_Элемент(Массив, Индекс) {
    Массив.splice(Индекс, 1)
}

function Объект_Проверка_Выхода_За_Границы_Экрана(п_Объект, Границы = null) {
    Холст = Границы ? Границы : Холст
    let Объект = п_Объект.Коллайдер
    if (Объект.Радиус) {
        if (Объект.Позиция.X + Объект.Радиус < Объект.Радиус ||
            Объект.Позиция.X > Холст.Ширина - Объект.Радиус ||
            Объект.Позиция.Y + Объект.Радиус < Объект.Радиус ||
            Объект.Позиция.Y > Холст.Высота - Объект.Радиус)
            return true
    } else {
        if (Объект.Позиция.X + Объект.Ширина < Объект.Ширина ||
            Объект.Позиция.X > Холст.Ширина - Объект.Ширина ||
            Объект.Позиция.Y + Объект.Высота < Объект.Высота ||
            Объект.Позиция.Y > Холст.Высота - Объект.Высота)
            return true
    }
}

function Объект_Управление({
    Режим = "Вид_Сверху",
    Объект,
    Скорость = 2,
    Платформа,
    Гравитация,
    Высота_Прыжка = 10
}) {
    switch (Режим) {
        case "Вид_Сверху":
            if (Движение.Влево) {
                Объект.Скорость_По_X = -Скорость
            } else
                Объект.Скорость_По_X = 0
            if (Движение.Вправо) {
                Объект.Скорость_По_X = Скорость
            }
            if (Движение.Вверх) {
                Объект.Скорость_По_Y = -Скорость
            } else
                Объект.Скорость_По_Y = 0
            if (Движение.Вниз) {
                Объект.Скорость_По_Y = Скорость
            }
            break

        case "Платформа":
            Объект.Скорость_По_Y = 2
            if (Движение.Влево) {
                Объект.Скорость_По_X = -Скорость
            } else
                Объект.Скорость_По_X = 0
            if (Движение.Вправо) {
                Объект.Скорость_По_X = Скорость
            }
            if (Движение.Вверх) {
                if (Объект.Находиться_На_Земле) {
                    Объект.Скорость_По_Y = -Высота_Прыжка
                    Объект.Находиться_На_Земле = false
                }
            }
            if (Объект.Коллайдер.Позиция.Y + Объект.Коллайдер.Высота >= Платформа.Позиция.Y &&
                Объект.Коллайдер.Позиция.Y <= Платформа.Позиция.Y + Платформа.Высота &&
                Объект.Коллайдер.Позиция.X <= Платформа.Позиция.X + Платформа.Ширина &&
                Объект.Коллайдер.Позиция.X + Объект.Коллайдер.Ширина >= Платформа.Позиция.X
            ) {
                if (Объект.Скорость_По_Y >= 0) {
                    Объект.Скорость_По_Y = 0
                    Объект.Позиция.Y = Платформа.Позиция.Y - Объект.Коллайдер.Высота
                    Объект.Находиться_На_Земле = true
                    break
                }
            } else {
                Объект.Находиться_На_Земле = false
            }
            if (Объект.Коллайдер.Позиция.Y + Объект.Коллайдер.Высота + Объект.Скорость_По_Y <= Платформа.Высота) {
                Объект.Скорость_По_Y += Гравитация
            }
            break
    }

    window.addEventListener("keydown", (e) => {
        switch (e.key) {
            case "ц":
            case "w":
                Движение.Вверх = true
                break;
            case "ф":
            case "a":
                Движение.Влево = true
                break;
            case "ы":
            case "s":
                Движение.Вниз = true
                break;
            case "в":
            case "d":
                Движение.Вправо = true
                break;
        }
    })

    window.addEventListener("keyup", (e) => {
        switch (e.key) {
            case "ц":
            case "w":
                Движение.Вверх = false
                break;
            case "ф":
            case "a":
                Движение.Влево = false
                break;
            case "ы":
            case "s":
                Движение.Вниз = false
                break;
            case "в":
            case "d":
                Движение.Вправо = false
                break;
        }
    })
}

function Определить_Столкновение_Со_Стеной(Первый_Объект, Второй_Объект) {
    if (Первый_Объект.Позиция.X >= Второй_Объект.Позиция.X + Второй_Объект.Ширина)
        return false
    else if (Первый_Объект.Позиция.X + Первый_Объект.Ширина <= Второй_Объект.Позиция.X)
        return false
    else if (Первый_Объект.Позиция.Y >= Второй_Объект.Позиция.Y + Второй_Объект.Высота)
        return false
    else if (Первый_Объект.Позиция.Y + Первый_Объект.Высота <= Второй_Объект.Позиция.Y)
        return false
    else
        return true
}

function Значение_Получить_Случайное(Минимально_Значение = 0, Максимальное_Значение = 1) {
    return Math.round(Math.random() * (Максимальное_Значение - Минимально_Значение) + Минимально_Значение)
}

function Объект_Добавить_Изменить_Свойство(Объект, Свойство, Значение) {
    return Reflect.set(Объект, Свойство, Значение)
}

function Объект_Получить_Свойство(Объект, Свойство) {
    return Reflect.get(Объект, Свойство)
}

function Линейная_Интерполяция(Начало, Конец, Время) {
    return Начало * (1 - Время) + Конец * Время
}

function Обратная_Линейная_Интерполяция(Значение, Начало, Конец) {
    return Диапазон_Изменения_Значений((Значение - Начало) / (Конец - Начало))
}

function Диапазон_Изменения_Значений(п_Значение, Минимально_Значение = 0, Максимальное_Значение = 1) {
    return Math.min(Максимальное_Значение, Math.max(Минимально_Значение, п_Значение))
}

function Диапазон_Значений(Первый_Диапазон_Значение1, Первый_Диапазон_Значение2, Второй_Диапазон_Значение1, Второй_Диапазон_Значение2, Значение) {
    return Линейная_Интерполяция(Второй_Диапазон_Значение1, Второй_Диапазон_Значение2, Обратная_Линейная_Интерполяция(Первый_Диапазон_Значение1, Первый_Диапазон_Значение2, Значение))
}

function Объект_Плавное_Передвижение_К_Точке(Объект, Мышь, Время = 0.2) {
    let Позиция_X = Линейная_Интерполяция(Объект.Позиция.X, Мышь.Позиция.X, Время)
    let Позиция_Y = Линейная_Интерполяция(Объект.Позиция.Y, Мышь.Позиция.Y, Время)
    Объект.Скорость_По_X -= (Объект.Позиция.X - Позиция.X)
    Объект.Скорость_По_Y -= (Объект.Позиция.Y - Позиция.Y)
}

function Элемент_В_Массиве_Получить_Случайный(Массив) {
    if (Массив.length > 0) {
        return Массив[Math.round(Math.random() * (Массив.length - 1))]
    }
}

function Корутина(Функция) {
    let Экземпляр_Корутины = Функция()
    Экземпляр_Корутины.next()
    return function (Элемент) {
        Экземпляр_Корутины.next(Элемент)
    }
}

let Копировать_Объект = (Объект) => {
    const Объект_Клон = {}
    for (let Свойство in Объект) {
        if (Объект.hasOwnProperty(Свойство)) {
            if (typeof Объект[Свойство] === 'object') {
                Объект_Клон[Свойство] = Копировать_Объект(Объект[Свойство])
            }
            else {
                Объект_Клон[Свойство] = Объект[Свойство]
            }
        }
    }
    return Объект_Клон
}

function Синус_Угла_В_Радианах(Значение) {
    let Результат = Math.sin(Значение * Math.PI / 180)
    return Результат
}

function Косинус_Угла_В_Радианах(Значение) {
    let Результат = Math.cos(Значение * Math.PI / 180)
    return Результат
}

function Найти_Случайную_Точку_На_Окружности(Окружность) {
    let Радиус = Окружность.Радиус * Math.sqrt(Math.random())
    let Угловое_Положение_Вектора = Math.random() * 2 * Math.PI
    let Позиция_X = Окружность.Позиция.X - Радиус * Math.cos(Угловое_Положение_Вектора)
    let Позиция_Y = Окружность.Позиция.Y - Радиус * Math.sin(Угловое_Положение_Вектора)
    return { Позиция: new Позиция(Позиция_X, Позиция_Y) }
}

function Массив_Перемешать(Массив) {
    Массив.sort(() => Math.random() - 0.5)
}

function Событие({ Условие, Действие }) {
    if (Условие) {
        Действие()
    }
}

let Загрузка_Ресурсов_Завершена = false

let Объекты_Созданы = false

let Всего_Ресурсов_Загрузить = 0
let Всего_Ресурсов_Загружено = 0
let Картинок_Загружено = 0
let Картинки = []
let Картинок_Всего = 0
let Массив_Картинок = []

function Картинки_Загрузить() {
    if (Картинок_Всего == 0)
        return
    for (let и = 0; и != Картинок_Всего; и++) {
        let Имя = Массив_Картинок[и][0]
        let Путь = Массив_Картинок[и][1]
        setTimeout(() => {
            Картинки[Имя] = new Image()
            Картинки[Имя].onload = function () {
                Картинок_Загружено++
                Всего_Ресурсов_Загружено++
            }
            Картинки[Имя].src = Путь
        }, 0)
    }
}

let Массив_Аудио = []
let Аудио_Загружено = 0
let Аудио_Всего = 0
let Звуки = []

let Аудио_Контекст_Создан = false
let Аудио_Контекст

function Аудио_Загрузить() {
    if (Аудио_Всего == 0)
        return

    for (let и = 0; и != Аудио_Всего; и++) {
        let Имя = Массив_Аудио[и][0]
        let Путь = Массив_Аудио[и][1]

        Звуки[Имя] = Массив_Аудио[и][0]
        Аудио_Загружено++
        Всего_Ресурсов_Загружено++
    }
}

let Шрифты = []

function Шрифт_Загрузить() {
    for (let и = 0; и < Шрифты.length; и++) {
        let п_Элемент = Шрифты[и]
        let Шрифт_Загруженный = new FontFace(п_Элемент.Название, `url(${п_Элемент.Путь})`)
        Шрифт_Загруженный.load().then(function (п_Шрифт) {
            document.fonts.add(п_Шрифт)
            Всего_Ресурсов_Загружено++
        })
    }

}

function Округление_Числа(Число, Округлить_До = 2) {
    return +Число.toFixed(Округлить_До)
}

function Сохранить_Ключ_В_Хранилище(Имя_Ключа, Значение) {
    localStorage.setItem(Имя_Ключа, Значение)
}

function Получить_Значение_Из_Хранилища(Имя_Ключа) {
    return localStorage.getItem(Имя_Ключа)
}

function Удалить_Значение_По_Ключу(Имя_Ключа) {
    localStorage.removeItem(Имя_Ключа)
}

function Удалить_Все_Ключи_В_Хранилище() {
    localStorage.clear()
}

function Локальное_Хранилище_Поддерживается() {
    try {
        return 'localStorage' in window && window['localStorage'] !== null
    } catch (e) {
        return false
    }
}

class Загрузка_Анимация {
    constructor() {
        this.Экран_Ширина_Середина = Холст.width / 2
        this.Экран_Высота_Середина = Холст.height / 2
        this.Радиус = 50
        this.Шары = [
            new Круг({ Позиция_X: this.Экран_Ширина_Середина, Позиция_Y: this.Экран_Высота_Середина, Радиус: 1, Цвет: "white" }),
            new Круг({ Позиция_X: this.Экран_Ширина_Середина - 5 - this.Радиус * 2, Позиция_Y: this.Экран_Высота_Середина, Радиус: this.Радиус, Цвет: "black", Обводка: true, Цвет_Обводки: "white", Толщина_Линии_Обводки: 5 }),
            new Круг({ Позиция_X: this.Экран_Ширина_Середина, Позиция_Y: this.Экран_Высота_Середина, Радиус: this.Радиус, Цвет: "black", Обводка: true, Цвет_Обводки: "white", Толщина_Линии_Обводки: 5 }),
            new Круг({ Позиция_X: this.Экран_Ширина_Середина + 5 + this.Радиус * 2, Позиция_Y: this.Экран_Высота_Середина, Радиус: this.Радиус, Цвет: "black", Обводка: true, Цвет_Обводки: "white", Толщина_Линии_Обводки: 5 }),
        ]
        this.Активен = false
    }
    Анимация_1_Запустить() {
        this.Активен = true
        Анимация_Движения(this, 1)
        function Анимация_Движения(п_Контекст, п_Индекс) {
            let Цель_X
            let Позиция_X

            switch (п_Индекс) {
                case 1:
                    Цель_X = п_Контекст.Шары[1].Позиция.X - 5 - п_Контекст.Радиус * 2
                    Позиция_X = ((п_Контекст.Экран_Ширина_Середина - п_Контекст.Радиус * 2) - Цель_X)
                    Анимация_Запустить({
                        Продолжительность_Анимации: 0.5,
                        Анимация: function (п_Прогресс) {
                            п_Контекст.Шары[1].Позиция.X = Линейная_Интерполяция(п_Контекст.Экран_Ширина_Середина - п_Контекст.Радиус * 2,
                                Цель_X, п_Прогресс)
                        }.bind(п_Контекст),
                        Действие_Окончания_Анимации: function () {
                            if (п_Контекст.Активен) {
                                Анимация_Возврата(п_Контекст, п_Контекст.Шары[1].Позиция.X, 1) // this.Спрайт.Позиция.X = Цель_X
                            }
                        }.bind(п_Контекст)
                    })
                    break;

                case 3:
                    Цель_X = п_Контекст.Шары[3].Позиция.X + 5 + п_Контекст.Радиус * 2
                    Позиция_X = (Цель_X - (п_Контекст.Экран_Ширина_Середина + п_Контекст.Радиус * 2))

                    Анимация_Запустить({
                        Продолжительность_Анимации: 0.5,
                        Анимация: function (п_Прогресс) {
                            п_Контекст.Шары[3].Позиция.X = Линейная_Интерполяция(п_Контекст.Экран_Ширина_Середина + п_Контекст.Радиус * 2,
                                Цель_X, п_Прогресс)

                        }.bind(п_Контекст),
                        Действие_Окончания_Анимации: function () {
                            if (п_Контекст.Активен) {
                                Анимация_Возврата(п_Контекст, п_Контекст.Шары[3].Позиция.X, 3) // this.Спрайт.Позиция.X = Цель_X
                            }
                        }.bind(п_Контекст)
                    })
                    break;
            }
        }

        function Анимация_Возврата(п_Контекст, п_Позиция_X, п_Индекс) {
            let Цель_X
            let Позиция_X

            switch (п_Индекс) {
                case 1:
                    Цель_X = (п_Контекст.Экран_Ширина_Середина - 5 - п_Контекст.Радиус * 2)
                    Позиция_X = (п_Позиция_X - Цель_X)

                    Анимация_Запустить({
                        Продолжительность_Анимации: 0.5,
                        Анимация: function (п_Прогресс) {
                            п_Контекст.Шары[1].Позиция.X = Линейная_Интерполяция(п_Позиция_X, Цель_X, п_Прогресс)
                        }.bind(п_Контекст),
                        Действие_Окончания_Анимации: function () {
                            if (п_Контекст.Активен) {
                                Анимация_Увеличения(п_Контекст, 3)
                            }
                        }.bind(п_Контекст)
                    })
                    break;

                case 3:
                    Цель_X = (п_Контекст.Экран_Ширина_Середина + 5 + п_Контекст.Радиус * 2)
                    Позиция_X = (п_Позиция_X - Цель_X)

                    Анимация_Запустить({
                        Продолжительность_Анимации: 0.5,
                        Анимация: function (п_Прогресс) {
                            п_Контекст.Шары[3].Позиция.X = Линейная_Интерполяция(п_Позиция_X, Цель_X, п_Прогресс)
                        }.bind(п_Контекст),
                        Действие_Окончания_Анимации: function () {
                            if (п_Контекст.Активен) {
                                Анимация_Увеличения(п_Контекст, 1)
                            }
                        }.bind(п_Контекст)
                    })
                    break;
            }
        }

        function Анимация_Увеличения(п_Контекст, п_Индекс) {
            let п_Радиус_Изначальный = п_Контекст.Шары[0].Радиус
            let Радиус_Цель = 1200
            let Разница = Math.round((Радиус_Цель * Всего_Ресурсов_Загружено / Всего_Ресурсов_Загрузить))
            let п = Разница - п_Радиус_Изначальный

            Анимация_Запустить({
                Продолжительность_Анимации: 0.5,
                Анимация: function (п_Прогресс) {
                    п_Контекст.Шары[0].Радиус = п_Радиус_Изначальный + (п * п_Прогресс)
                }.bind(п_Контекст),
                Действие_Окончания_Анимации: function () {
                    if (п_Контекст.Активен) {
                        Анимация_Движения(п_Контекст, п_Индекс)
                    }
                }.bind(п_Контекст)
            })
        }
    }

    Обновить() {
        for (let и = 0; и < this.Шары.length; и++) {
            let п_Элемент = this.Шары[и]
            п_Элемент.Обновить()
        }
    }
}

let Временная_Метка
let Последний_Кадр = 0
let Кадров_В_Секунду = 0
let Кадров_В_Секунду_Время = 0
let Количество_Кадров = 0
let Время_Пройденное = 0

class Игра {
    constructor({ Ресурсы = {}, Сцены = [], Счетчик_Кадров = false, Экран_Загрузки = false, Ориентация_Экрана = "Горизонтальная" }) {
        Ориентация_Экрана_Выбрать(Ориентация_Экрана)

        this.Ресурсы = Ресурсы
        this.Сцены = Сцены
        this.Сцена = this.Сцены[0]

        this.Ресурсы.Картинки = this.Ресурсы.Картинки && this.Ресурсы.Картинки.length > 0 ? this.Ресурсы.Картинки : []
        this.Ресурсы.Аудио = this.Ресурсы.Аудио && this.Ресурсы.Аудио.length > 0 ? this.Ресурсы.Аудио : []
        this.Показать_Счетчик_Кадров = Счетчик_Кадров

        this.Экран_Загрузки = Экран_Загрузки

        this.Загрузка_Анимация = new Загрузка_Анимация()
        if (this.Экран_Загрузки)
            this.Загрузка_Анимация.Анимация_1_Запустить()

        this.#Добавить_Ресурсы()
    }

    #Добавить_Ресурсы() {
        for (let и = 0; и < this.Ресурсы.Картинки.length; и++) {
            Массив_Картинок.push(this.Ресурсы.Картинки[и])
        }
        for (let k = 0; k < this.Ресурсы.Аудио.length; k++) {
            Массив_Аудио.push(this.Ресурсы.Аудио[k])
        }

        Картинок_Всего = Массив_Картинок.length
        Аудио_Всего = Массив_Аудио.length

        Всего_Ресурсов_Загрузить += Картинок_Всего + Аудио_Всего

        if (this.Ресурсы.Шрифт) {
            Шрифты = this.Ресурсы.Шрифт
            Всего_Ресурсов_Загрузить += this.Ресурсы.Шрифт.length
            Шрифт_Загрузить()
        }
        Картинки_Загрузить()
        Аудио_Загрузить()

        setTimeout(() => {
            this.#Ресурсы_Загружены_Проверка()
        });

        if (this.Экран_Загрузки)
            this.#Загрузка_Ресурсов_Проверка_Анимация()
    }

    #Загрузка_Ресурсов_Проверка_Анимация() {
        Анимация_Запустить({
            Продолжительность_Анимации: 3,
            Анимация: function (п_Прогресс) {
            }.bind(this),
            Действие_Окончания_Анимации: function () {
                if (Загрузка_Ресурсов_Завершена) {
                    this.Загрузка_Анимация.Активен = false
                } else {
                    this.#Загрузка_Ресурсов_Проверка_Анимация()
                }
            }.bind(this)
        })
    }

    #Ресурсы_Загружены_Проверка() {
        if (Всего_Ресурсов_Загрузить == Всего_Ресурсов_Загружено && !Загрузка_Ресурсов_Завершена) {
            for (let и = 0; и < this.Сцены.length; и++) {
                this.Сцены[и]._Создать()
            }
            Загрузка_Ресурсов_Завершена = true
            this.Игра_Загружена()
        }

        if (!this.Загрузка_Анимация.Активен && Загрузка_Ресурсов_Завершена) {
            this.Загрузка_Анимация = ""
            this.#Обновить()
            return
        }

        Холст_Очистить()

        if (this.Загрузка_Анимация && this.Экран_Загрузки)
            this.Загрузка_Анимация.Обновить()

        requestAnimationFrame(this.#Ресурсы_Загружены_Проверка.bind(this))
    }

    Изменить(п_Сцена) {
        this.Сцена = п_Сцена
    }

    #Обновить(Временная_Метка = 0) {
        Время_Пройденное = Временная_Метка - Время_Последнего_Кадра
        if ((Время_Пройденное < Время_Кадра_В_Минуту)) {
            requestAnimationFrame(this.#Обновить.bind(this))
            return
        }
        this.#Отслеживать_События_Нажатия()

        Холст_Очистить()

        requestAnimationFrame(this.#Обновить.bind(this))

        for (let и = 0; и < this.Сцены.length; и++) {
            if (this.Сцена === this.Сцены[и]) {
                this.Сцены[и]._Обновить(Временная_Метка)
                if (this.Показать_Счетчик_Кадров) {
                    this.#Счетчик_Кадров_Обновить(Временная_Метка)
                }
                Время_Последнего_Кадра = Временная_Метка
                return
            }
        }
    }

    #Счетчик_Кадров_Обновить(Временная_Метка) {
        let п_Время = (Временная_Метка - Последний_Кадр) / 1000
        Последний_Кадр = Временная_Метка

        if (Кадров_В_Секунду_Время > 0.25) {
            Кадров_В_Секунду = Math.round(Количество_Кадров / Кадров_В_Секунду_Время)

            Кадров_В_Секунду_Время = 0
            Количество_Кадров = 0
        }

        Кадров_В_Секунду_Время += п_Время
        Количество_Кадров++
        let п_Счетчик = new Текст({ Текст: Кадров_В_Секунду, Позиция_X: 100, Позиция_Y: 100, Размер_Шрифта: 80, Цвет: "white", Обводка: true, Цвет_Обводки: "black" }).Обновить()
    }


    #Тач_Действие_При_Касании(п_Событие) {
        Тач_Позиции_Определить(п_Событие)
        Мышь.Клик = true
        Действие_При_Нажатии_Проверить(п_Событие)
    }

    #Тач_Действие_При_Прекращении_Касания(п_Событие) {
        Мышь.Клик = false
        Действие_При_Отжатии_Проверить(п_Событие)
    }

    #Тач_Действие_При_Движение(п_Событие) {
        Тач_Позиции_Определить(п_Событие)
        Действие_При_Наведении_Проверить(п_Событие)
    }

    #Мышь_Действие_При_Нажатии(п_Событие) {
        Мышь_Позиции_Определить(п_Событие)
        Мышь.Клик = true
        Действие_При_Нажатии_Проверить(п_Событие)
    }

    #Мышь_Действие_При_Прекращении_Нажатия(п_Событие) {
        Мышь.Клик = false
        Действие_При_Отжатии_Проверить(п_Событие)
    }

    #Мышь_Действие_При_Движении(п_Событие) {
        Мышь_Позиции_Определить(п_Событие)
        Действие_При_Наведении_Проверить(п_Событие)
    }

    #Отслеживать_События_Нажатия() {
        switch (Платформа_Название) {
            case "Android":
                window.addEventListener("touchmove", this.#Тач_Действие_При_Движение)
                window.addEventListener("touchstart", this.#Тач_Действие_При_Касании)
                window.addEventListener("touchend", this.#Тач_Действие_При_Прекращении_Касания)
                break;
            default:
                window.addEventListener('mousedown', this.#Мышь_Действие_При_Нажатии)
                window.addEventListener('mouseup', this.#Мышь_Действие_При_Прекращении_Нажатия)
                window.addEventListener('mousemove', this.#Мышь_Действие_При_Движении)
                break;
        }
    }

    Игра_Загружена() {
        setTimeout(() => {
            clearInterval(Проверка_Размер_Холста)
        }, 500);
    }
}

class Сцена {
    #Создать
    #Обновить
    constructor({ Создать = function () { }, Обновить = function () { } }) {
        this.#Создать = Создать
        this.#Обновить = Обновить
    }

    _Создать() {
        try {
            return this.#Создать()
        } catch (Ошибка) {
            console.log(Ошибка)
        }
    }

    _Обновить() {
        try {
            return this.#Обновить()
        } catch (Ошибка) {
            console.log(Ошибка)
        }
    }
}

function Индекс_В_Массиве_По_Элементу_Получить(Массив, Элемент) {
    return Массив.indexOf(Элемент)
}

function Документ_Задний_Фон_Применить(п_Картинка) {
    /// Если картинка не применяется, убрать пробелы в названии
    document.body.style.backgroundImage = `url(${п_Картинка})`
    document.body.style.backgroundSize = "cover"
    document.body.style.backgroundRepeat = "no-repeat"
    document.body.style.backgroundAttachment = "fixed"
    document.body.style.backgroundPosition = "center"
}

function Кнопка_Создать({
    Позиция_X,
    Позиция_Y,
    Кнопка_Ширина = 100,
    Кнопка_Высота = 50,
    Кнопка_Закргулить_Углы = false,
    Кнопка_Цвет = "rgba(0,0,0)",
    Текст_Позиция_X = 0,
    Текст_Позиция_Y = 0,
    п_Текст = "",
    Размер_Шрифта = 28,
    Выравнивание_По = "left",
    Прозрачность = 0,
    Название_Шрифта = "FontsLIB",
    Текст_Тень = false,
    Спрайты = "",
    Обводка = true,
    Цвет_Обводки = "red",
    Толщина_Линии_Обводки = 4,
    Текст_Цвет = "black",
    Текст_Обводка = false,
    Активный = true
}) {
    this.Активный = Активный
    this.Позиция = new Позиция(Позиция_X, Позиция_Y)
    this.Квадрат = new Квадрат({
        Позиция_X: Позиция_X,
        Позиция_Y: Позиция_Y,
        Ширина: Кнопка_Ширина,
        Высота: Кнопка_Высота,
        Цвет: Кнопка_Цвет,
        Прозрачность: Прозрачность,
        Обводка: Обводка,
        Цвет_Обводки: Цвет_Обводки,
        Толщина_Линии_Обводки: Толщина_Линии_Обводки,
        Закргулить_Углы: Кнопка_Закргулить_Углы,
    })

    this.Спрайты = Спрайты
    if (this.Спрайты) {
        this.Спрайты.forEach(п_Элемент => {
            п_Элемент.Позиция.X = п_Элемент.Позиция.X + Позиция_X
            п_Элемент.Позиция.Y = п_Элемент.Позиция.Y + Позиция_Y
        })
    }

    this.Текст = new Текст({
        Позиция_X: Позиция_X + Текст_Позиция_X,
        Позиция_Y: Позиция_Y + Текст_Позиция_Y,
        Текст: п_Текст,
        Выравнивание_По: Выравнивание_По,
        Цвет: Текст_Цвет,
        Размер_Шрифта: Размер_Шрифта,
        Название_Шрифта: Название_Шрифта,
        Тень: Текст_Тень,
        Расстояние_Между_Символами: 1,
        Смещение_Тени_По_X: 5,
        Смещение_Тени_По_Y: 5,
        Тень_Размытие: 0,
        Обводка: Текст_Обводка,
        Цвет_Тени: "black",
        Толщина_Линии_Обводки: 4
    })

    this.Обновить = function () {
        if (!this.Активный)
            return
        if (this.Спрайты) {
            this.Спрайты.forEach(п_Элемент => {
                п_Элемент.Обновить()
            })
        }
        this.Квадрат.Обновить()
        this.Текст.Обновить()
    }

    this.Мышь_Нажата = function () {
        if (!this.Активный)
            return
        return this.Квадрат.Мышь_Нажата()
    }
}

function Объект_За_Границей_Проверить(п_Объект) {
    if (((п_Объект.Позиция.X - п_Объект.Ширина) > Холст.width) || ((п_Объект.Позиция.X + п_Объект.Ширина) < 0)) {
        return true
    } else if (((п_Объект.Позиция.Y - п_Объект.Высота) > Холст.height) || ((п_Объект.Позиция.Y + п_Объект.Высота) < 0)) {
        return true
    } else {
        return false
    }
}

function Мышь_Позиции_Определить(п_Событие) {
    Мышь.Позиция.X = Определить_Позиции_Мыши("X", п_Событие)
    Мышь.Позиция.Y = Определить_Позиции_Мыши("Y", п_Событие)
    Мышь.Коллайдер.Позиция.X = Мышь.Позиция.X
    Мышь.Коллайдер.Позиция.Y = Мышь.Позиция.Y
}

function Тач_Позиции_Определить(п_Событие) {
    Мышь.Позиция.X = Определить_Позиции_Мыши("X", п_Событие.touches[0])
    Мышь.Позиция.Y = Определить_Позиции_Мыши("Y", п_Событие.touches[0])
    Мышь.Коллайдер.Позиция.X = Мышь.Позиция.X
    Мышь.Коллайдер.Позиция.Y = Мышь.Позиция.Y
}

class Параллакс {
    constructor(п_Картинка, п_Направление, п_Скорость_Общая, п_Скорость_Измененная = 1, п_Позиция = 0) {

        this.Позиция = new Позиция()
        this.Картинка = п_Картинка

        this.Спрайт = new Спрайт({ Картинка: this.Картинка })
        this.Спрайт2 = new Спрайт({ Картинка: this.Картинка })

        this.Скорость_Общая = п_Скорость_Общая
        this.Скорость_Измененная = п_Скорость_Измененная
        this.Скорость = this.Скорость_Общая * this.Скорость_Измененная

        this.Направление = п_Направление
        this.Направление_Выбрать(this.Направление, п_Позиция)
    }

    Направление_Выбрать(п_Направление, п_Позиция) {
        switch (п_Направление) {
            case "x":
                this.Позиция.X = 0
                this.Позиция.Y = п_Позиция
                this.Ширина = this.Спрайт.Картинка.width
                this.Позиция_X2 = this.Ширина

                this.Спрайт.Позиция.Y = this.Позиция.Y
                this.Спрайт.Скорость_По_X = -this.Скорость

                this.Спрайт2.Позиция.X = this.Позиция_X2
                this.Спрайт2.Позиция.Y = this.Позиция.Y
                this.Спрайт2.Скорость_По_X = -this.Скорость
                break;

            case "y":

                this.Позиция.X = п_Позиция
                this.Позиция.Y = 0
                this.Высота = this.Спрайт.Картинка.height
                this.Позиция_Y2 = this.Высота

                this.Спрайт.Позиция.X = this.Позиция.X
                this.Спрайт.Скорость_По_Y = this.Скорость

                this.Спрайт2.Позиция.Y = this.Позиция_Y2
                this.Спрайт2.Позиция.X = this.Позиция.X
                this.Спрайт2.Скорость_По_Y = this.Скорость

                break;
        }
    }

    Перемещать_Спрайт() {
        switch (this.Направление) {
            case "x":
                if (this.Спрайт.Позиция.X <= -this.Ширина) {
                    this.Позиция.X = (this.Ширина + this.Спрайт2.Позиция.X) - this.Скорость
                    this.Спрайт.Позиция.X = this.Позиция.X
                }

                if (this.Спрайт2.Позиция.X <= -this.Ширина) {
                    this.Позиция_X2 = (this.Ширина + this.Спрайт.Позиция.X) - this.Скорость
                    this.Спрайт2.Позиция.X = this.Позиция_X2
                }
                break;

            case "y":
                if (this.Спрайт.Позиция.Y >= this.Высота) {
                    this.Позиция.Y = (this.Спрайт2.Позиция.Y - this.Высота) + this.Скорость
                    this.Спрайт.Позиция.Y = this.Позиция.Y
                }

                if (this.Спрайт2.Позиция.Y >= this.Высота) {
                    this.Позиция_Y2 = (this.Спрайт.Позиция.Y - this.Высота) + this.Скорость
                    this.Спрайт2.Позиция.Y = this.Позиция_Y2
                }
                break;
        }
    }

    Скорость_Изменить(п_Скорость) {
        this.Скорость_Общая = п_Скорость
        this.Скорость = this.Скорость_Общая * this.Скорость_Измененная
        this.Спрайт.Скорость_По_X = -this.Скорость
        this.Спрайт2.Скорость_По_X = -this.Скорость
    }

    Обновить() {
        this.Перемещать_Спрайт()
        this.Спрайт.Обновить()
        this.Спрайт2.Обновить()
    }
}

function Анимация_Запустить({ Продолжительность_Анимации = 1, Анимация = "", Время_Просчет = Время_Просчета_Линейная, Конец_Анимации = function () { } }) {
    let Начало = 0
    function Анимировать(п_Текущее_Время = 0) {
        if ((Время_Пройденное < Время_Кадра_В_Минуту)) {
            requestAnimationFrame(Анимировать)
            return
        }
        let п_Пройденное_Время = (Начало / (Продолжительность_Анимации * 1000))
        if (п_Пройденное_Время > 1) п_Пройденное_Время = 1

        let п_Прогресс = Время_Просчет(п_Пройденное_Время)

        if (Анимация) {
            Анимация(п_Прогресс)
        }

        if (п_Пройденное_Время < 1) {
            requestAnimationFrame(Анимировать)
            Начало += 10
            return
        }
        return Конец_Анимации()
    }
    requestAnimationFrame(Анимировать)
}

function Время_Просчета_Линейная(п_Пройденное_Время) {
    return п_Пройденное_Время
}

function Время_Просчета_Параболическая_Кривая(п_Пройденное_Время) {
    return Math.pow(п_Пройденное_Время, 2)
}

function Время_Просчета_Дуга(п_Пройденное_Время) {
    return 1 - Math.sin(Math.acos(п_Пройденное_Время))
}

function Время_Просчета_Стрельба_Из_Лука(п_Пройденное_Время, Коэффициента_Эластичности = 2) {
    return Math.pow(п_Пройденное_Время, 2) * ((Коэффициента_Эластичности + 1) * п_Пройденное_Время - Коэффициента_Эластичности)
}

function Время_Просчета_Подпрыгивание(п_Пройденное_Время) {
    for (let a = 0, b = 1; 1; a += b, b /= 2) {
        if (п_Пройденное_Время >= (7 - 4 * a) / 11) {
            return -Math.pow((11 - 6 * a - 11 * п_Пройденное_Время) / 4, 2) + Math.pow(b, 2)
        }
    }
}

function Время_Просчета_Эластичная(п_Пройденное_Время, Начальный_Диапазона = 1) {
    return Math.pow(2, 10 * (п_Пройденное_Время - 1)) * Math.cos(20 * Math.PI * Начальный_Диапазона / 3 * п_Пройденное_Время)
}

function Преобразовать_Время_Просчета(Время_Просчета) {
    return function (п_Пройденное_Время) {
        return 1 - Время_Просчета(1 - п_Пройденное_Время)
    }
}

function Число_Сократить(п_Число) {
    return п_Число.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".").substr(0, 15)
}

function Название_Степени_Числа(п_Число) {
    let п_Текст = ""
    if (п_Число >= 10000) {
        п_Текст = " тыс"
    } if (п_Число >= 1000000) {
        п_Текст = " млн"
    } if (п_Число >= 1000000000) {
        п_Текст = " млрд"
    } if (п_Число >= 1000000000000) {
        п_Текст = " трлн"
    } if (п_Число >= 1000000000000000) {
        п_Текст = " квадрлн"
    }
    return п_Текст
}

class WebGLRender {
    constructor() {
        if (!Контекст_Шейдер) {
            Контекст_Шейдер = Холст_Шейдер.getContext("webgl")
        }
        this.Шейдер_Вершиный = this.Шейдер_Создать(Контекст_Шейдер, Контекст_Шейдер.VERTEX_SHADER, Шейдер_Вершинный)
        this.Шейдер_Фрагментный = this.Шейдер_Создать(Контекст_Шейдер, Контекст_Шейдер.FRAGMENT_SHADER, Шейдер_Фрагментный)

        this.Программа = this.Программа_Создать(Контекст_Шейдер, this.Шейдер_Вершиный, this.Шейдер_Фрагментный)

        this.Позиция = new Позиция()

        this.Ширина = 1920
        this.Высота = 1080

        this.Текстуры = []

        this.Шейдер_С_Текстурой = false

        this.Область_Просмотра_Позиция_X = 800
        this.Область_Просмотра_Позиция_Y = 380
        this.Область_Просмотра_Ширина = 100
        this.Область_Просмотра_Высота = 500
    }

    Шейдер_Создать(п_Контекст_Шейдер, п_Тип, п_Данные) {
        let п_Шейдер = п_Контекст_Шейдер.createShader(п_Тип)
        п_Контекст_Шейдер.shaderSource(п_Шейдер, п_Данные)
        п_Контекст_Шейдер.compileShader(п_Шейдер)
        let п_Создался = п_Контекст_Шейдер.getShaderParameter(п_Шейдер, п_Контекст_Шейдер.COMPILE_STATUS)
        if (п_Создался) {
            return п_Шейдер
        }

        console.log(п_Контекст_Шейдер.getShaderInfoLog(п_Шейдер))
        п_Контекст_Шейдер.deleteShader(п_Шейдер)
    }

    Программа_Создать(Контекст_Шейдер, п_Шейдер_Вершиный, п_Шейдер_Фрагментный) {
        let п_Программа = Контекст_Шейдер.createProgram()
        Контекст_Шейдер.attachShader(п_Программа, п_Шейдер_Вершиный)
        Контекст_Шейдер.attachShader(п_Программа, п_Шейдер_Фрагментный)
        Контекст_Шейдер.linkProgram(п_Программа)
        let п_Создался = Контекст_Шейдер.getProgramParameter(п_Программа, Контекст_Шейдер.LINK_STATUS)
        if (п_Создался) {
            this.Переменные_Создать(п_Программа)
            return п_Программа
        }

        console.log(Контекст_Шейдер.getProgramInfoLog(п_Программа))
        Контекст_Шейдер.deleteProgram(п_Программа)
    }

    Переменные_Создать(п_Программа) {
        this.Локальная_Позиция = Контекст_Шейдер.getAttribLocation(п_Программа, "a_position")
        this.Разрешение_Области = Контекст_Шейдер.getUniformLocation(п_Программа, "u_resolution")
        this.Разрешение = Контекст_Шейдер.getUniformLocation(п_Программа, "iResolution")
        this.Время = Контекст_Шейдер.getUniformLocation(п_Программа, "iTime")
        this.Позиция = Контекст_Шейдер.getUniformLocation(п_Программа, "iPos")
        this.Картинки = [
            Контекст_Шейдер.getUniformLocation(п_Программа, "u_image0"),
            Контекст_Шейдер.getUniformLocation(п_Программа, "u_image1"),
        ]
        this.Позиция_Текстур = Контекст_Шейдер.getAttribLocation(п_Программа, "a_texCoord")
        this.Текстура_Размер = Контекст_Шейдер.getUniformLocation(п_Программа, "u_textureSize")
    }

    Шейдер_1_Создать() {
        this.Шейдер_С_Текстурой = false
        this.Буффер_Позиция = this.Буффер_Создать(this.Локальная_Позиция)
        this.Фигура_Создать(Контекст_Шейдер, this.Позиция.X, 0, this.Ширина, this.Высота)
        Контекст_Шейдер.viewport(0, 0, this.Ширина, this.Высота)
        Контекст_Шейдер.clearColor(0, 0, 0, 0)
        Контекст_Шейдер.useProgram(this.Программа)
        this.Переменные_Применить(this.Ширина, this.Высота)
        Контекст_Шейдер.uniform2f(this.Позиция, this.Позиция.X + this.Ширина / 2, 1080 - (this.Позиция.Y + this.Высота / 2))
        this.Фигура_Отрисовать()
    }

    Шейдер_2_Создать(п_Картинки) {
        this.Шейдер_С_Текстурой = true
        this.Высота_Картинки = п_Картинки[0].height
        this.Ширина_Картинки = п_Картинки[0].width
        this.Буффер_Текстура_Позиция = this.Буффер_Текстуры_Создать(this.Позиция_Текстур)

        for (let и = 0; и < п_Картинки.length; ++и) {
            let п_Текстура = this.Текстура_Создать(п_Картинки, и)
            this.Текстуры.push(п_Текстура)
        }
        this.Буффер_Позиция = this.Буффер_Создать(this.Локальная_Позиция)
        Контекст_Шейдер.viewport(0, 0, п_Картинки[0].width, п_Картинки[0].height)
        Контекст_Шейдер.useProgram(this.Программа)
        this.Переменные_Применить(п_Картинки[0].width, п_Картинки[0].height)
        Контекст_Шейдер.uniform1i(this.Картинки[0], 0)
        Контекст_Шейдер.uniform1i(this.Картинки[1], 1)
        Контекст_Шейдер.uniform2f(this.Текстура_Размер, п_Картинки[0].width, п_Картинки[0].height)
    }

    Текстура_Создать(п_Картинки, п_Индекс) {
        let п_Текстура = Контекст_Шейдер.createTexture()
        Контекст_Шейдер.bindTexture(Контекст_Шейдер.TEXTURE_2D, п_Текстура)
        Контекст_Шейдер.texParameteri(Контекст_Шейдер.TEXTURE_2D, Контекст_Шейдер.TEXTURE_WRAP_S, Контекст_Шейдер.CLAMP_TO_EDGE)
        Контекст_Шейдер.texParameteri(Контекст_Шейдер.TEXTURE_2D, Контекст_Шейдер.TEXTURE_WRAP_T, Контекст_Шейдер.CLAMP_TO_EDGE)
        Контекст_Шейдер.texParameteri(Контекст_Шейдер.TEXTURE_2D, Контекст_Шейдер.TEXTURE_MIN_FILTER, Контекст_Шейдер.NEAREST)
        Контекст_Шейдер.texParameteri(Контекст_Шейдер.TEXTURE_2D, Контекст_Шейдер.TEXTURE_MAG_FILTER, Контекст_Шейдер.NEAREST)
        Контекст_Шейдер.enable(Контекст_Шейдер.BLEND)
        Контекст_Шейдер.blendFunc(Контекст_Шейдер.SRC_ALPHA, Контекст_Шейдер.ONE_MINUS_SRC_ALPHA)
        Контекст_Шейдер.texImage2D(Контекст_Шейдер.TEXTURE_2D, 0, Контекст_Шейдер.RGBA, Контекст_Шейдер.RGBA, Контекст_Шейдер.UNSIGNED_BYTE, п_Картинки[п_Индекс])

        return п_Текстура
    }

    Переменные_Применить(п_Ширина = 1920, п_Высота = 1080) {
        Контекст_Шейдер.uniform2f(this.Разрешение_Области, п_Ширина, п_Высота)
        Контекст_Шейдер.uniform2f(this.Разрешение, п_Ширина, п_Высота)
    }

    Буффер_Текстуры_Создать(п_Атрибут) {
        let п_Буффер = Контекст_Шейдер.createBuffer()
        Контекст_Шейдер.bindBuffer(Контекст_Шейдер.ARRAY_BUFFER, п_Буффер)
        Контекст_Шейдер.bufferData(Контекст_Шейдер.ARRAY_BUFFER, new Float32Array([
            0.0, 0.0,
            1.0, 0.0,
            0.0, 1.0,
            0.0, 1.0,
            1.0, 0.0,
            1.0, 1.0]), Контекст_Шейдер.STATIC_DRAW)


        Контекст_Шейдер.enableVertexAttribArray(п_Атрибут)
        Контекст_Шейдер.vertexAttribPointer(п_Атрибут, 2, Контекст_Шейдер.FLOAT, false, 0, 0)
    }

    Буффер_Создать(п_Атрибут) {
        let п_Буффер = Контекст_Шейдер.createBuffer()

        Контекст_Шейдер.enableVertexAttribArray(п_Атрибут)

        Контекст_Шейдер.bindBuffer(Контекст_Шейдер.ARRAY_BUFFER, п_Буффер)

        let п_Размер = 2
        let п_Тип = Контекст_Шейдер.FLOAT
        let п_Нормализовать = false
        let п_Перемещение = 0
        let п_Начало = 0
        Контекст_Шейдер.vertexAttribPointer(п_Атрибут, п_Размер, п_Тип, п_Нормализовать, п_Перемещение, п_Начало)

        return п_Буффер
    }

    Фигура_Создать(Контекст_Шейдер, п_Позиция_X, п_Позиция_Y, п_Ширина, п_Высота) {
        let п_Позиция_X_1 = п_Позиция_X
        let п_Позиция_X_2 = п_Позиция_X + п_Ширина
        let п_Позиция_Y_1 = п_Позиция_Y
        let п_Позиция_Y_2 = п_Позиция_Y + п_Высота
        Контекст_Шейдер.bufferData(Контекст_Шейдер.ARRAY_BUFFER, new Float32Array([
            п_Позиция_X_1, п_Позиция_Y_1,
            п_Позиция_X_2, п_Позиция_Y_1,
            п_Позиция_X_1, п_Позиция_Y_2,
            п_Позиция_X_1, п_Позиция_Y_2,
            п_Позиция_X_2, п_Позиция_Y_1,
            п_Позиция_X_2, п_Позиция_Y_2,
        ]), Контекст_Шейдер.STATIC_DRAW)
    }

    Фигура_Отрисовать() {
        Контекст_Шейдер.clear(Контекст_Шейдер.COLOR_BUFFER_BIT)
        const п_Тип = Контекст_Шейдер.TRIANGLES
        const п_Начало = 0
        const п_Количество = 6
        Контекст_Шейдер.drawArrays(п_Тип, п_Начало, п_Количество)
    }

    Обновить(Позиция_X, Позиция_Y, Скорость) {

        if (!Контекст_Шейдер) {
            console.log("Не поддерживает")
            return
        }

        switch (this.Шейдер_С_Текстурой) {
            case true:
                Контекст_Шейдер.activeTexture(Контекст_Шейдер.TEXTURE0)
                Контекст_Шейдер.bindTexture(Контекст_Шейдер.TEXTURE_2D, this.Текстуры[0])
                Контекст_Шейдер.activeTexture(Контекст_Шейдер.TEXTURE1)
                Контекст_Шейдер.bindTexture(Контекст_Шейдер.TEXTURE_2D, this.Текстуры[1])
                this.Фигура_Создать(Контекст_Шейдер, this.Позиция.X, this.Позиция.Y, this.Ширина_Картинки, this.Высота_Картинки);
                break;

            case false:
                Контекст_Шейдер.uniform2f(this.Позиция, Мышь.Позиция.X, this.Высота - Мышь.Позиция.Y)
                break;
        }
        this.Фигура_Отрисовать()
        Контекст_Шейдер.uniform1f(this.Время, Время_Последнего_Кадра / 1000)
    }
}

class Кадр extends Объект {
    constructor({
        Позиция_X = 0,
        Позиция_Y = 0,
        Масштаб = 1,
        Смещение_Спрайта_По_X = 0,
        Смещение_Спрайта_По_Y = 0,
        Скорость_По_X = 0,
        Скорость_По_Y = 0,
        Угол_В_Радианах = 0,
        Угол_В_Градусах = 0,
        Прозрачность = 1,
        Смена_Цвета = false,
        п_Контекст = Контекст,
        Родительский_Объект = "",
        Картинка = "",
        Тень = false,
        Цвет_Тени = "black",
        Смещение_Тени_По_X = 5,
        Смещение_Тени_По_Y = 5,
        Тень_Размытие = 0,
        Обводка = false,
        Толщина_Линии_Обводки = 20,
        Цвет_Обводки = "black",
        Ширина,
        Высота,
        Позиция_X2,
        Позиция_Y2,
    }) {
        super({ Позиция_X, Позиция_Y, Скорость_По_X, Скорость_По_Y, Угол_В_Радианах, Угол_В_Градусах, п_Контекст, Тень, Цвет_Тени, Смещение_Тени_По_X, Смещение_Тени_По_Y, Тень_Размытие })

        this.Картинка = Картинка

        this.Ширина = Ширина
        this.Высота = Высота

        this.Масштаб = Масштаб
        this.Смещение_Спрайта_По_X = Смещение_Спрайта_По_X
        this.Смещение_Спрайта_По_Y = Смещение_Спрайта_По_Y
        this.Индекс_Точки_Пути = 0
        this.Центр_Объекта = {
            Позиция_X: this.Позиция.X + this.Ширина / 2,
            Позиция_Y: this.Позиция.Y + this.Высота / 2
        }
        this.Прозрачность = Прозрачность
        this.Смена_Цвета = Смена_Цвета
        this.Родительский_Объект = Родительский_Объект

        this.Вращение = false
        this.Скорость_Вращения = 1

        this.Тень = Тень
        this.Цвет_Тени = Цвет_Тени
        this.Смещение_Тени_По_X = Смещение_Тени_По_X
        this.Смещение_Тени_По_Y = Смещение_Тени_По_Y
        this.Тень_Размытие = Тень_Размытие

        this.Обводка = Обводка
        this.Толщина_Линии_Обводки = Толщина_Линии_Обводки
        this.Цвет_Обводки = Цвет_Обводки

        this.Ширина2 = this.Ширина
        this.Высота2 = this.Высота

        this.Позиция_X_Изначальная = this.Позиция.X
        this.Позиция_Y_Изначальная = this.Позиция.Y
        this.Ширина2_Изначальная = this.Ширина2
        this.Высота2_Изначальная = this.Высота2

        this.Позиция_X2 = Позиция_X2 ? Позиция_X2 : this.Позиция.X
        this.Позиция_Y2 = Позиция_Y2 ? Позиция_Y2 : this.Позиция.Y
    }

    Поменять_Спрайт(Картинка) {
        this.Картинка = Картинка
    }

    Повернуть(Градусы) {
        this.Угол_В_Градусах = Градусы
        return this
    }

    Вращать() {
        this.Угол_В_Градусах = this.Угол_В_Градусах >= 360 ? 0 : this.Угол_В_Градусах += this.Скорость_Вращения
    }

    Отрисовать() {
        this.Контекст.globalAlpha = this.Прозрачность
        if (this.Вращение) {
            this.Вращать()
        }
        if (this.Обводка) {
            this.Контекст.lineWidth = this.Толщина_Линии_Обводки
            this.Контекст.strokeStyle = this.Цвет_Обводки
            this.Контекст.strokeRect(this.Позиция.X, this.Позиция.Y, this.Ширина, this.Высота)
        }
        if (this.Угол_В_Радианах != 0) {
            this.Контекст.save()
            this.Контекст.translate(this.Позиция.X + this.Ширина2 / 2, this.Позиция.Y + this.Высота2 / 2)
            this.Контекст.rotate(this.Угол_В_Радианах)

            this.Контекст.drawImage(
                this.Картинка,
                this.Позиция_X2,
                this.Позиция_Y2,
                this.Ширина,
                this.Высота,
                -this.Ширина2 / 2,
                -this.Высота2 / 2,
                this.Ширина2,
                this.Высота2 ,
            )
            this.Контекст.restore()

        } else {
            this.Контекст.drawImage(
                this.Картинка,
                this.Позиция_X2,
                this.Позиция_Y2,
                this.Ширина,
                this.Высота,
                this.Позиция.X,
                this.Позиция.Y,
                this.Ширина2,
                this.Высота2,
            )
        }
    }

    Обновить() {
        super.Обновить()
        this.Отрисовать()

        this.Центр_Объекта = {
            Позиция_X: this.Позиция.X + this.Ширина / 2,
            Позиция_Y: this.Позиция.Y + this.Высота / 2
        }
    }
}

function Действие_При_Нажатии_Проверить() { }
function Действие_При_Отжатии_Проверить() { }
function Действие_При_Наведении_Проверить() { }

function Случайное_Число_С_Плавающей_Запятой_Получить() {
    return Math.random()
}

function Точка_Вращения_Получить(Позиция_X, Позиция_Y, Ширина, Высота, Угол_В_Радианах) {
    let Центр_По_X = Позиция_X + Ширина / 2
    let Центр_По_Y = Позиция_Y + Высота / 2

    let п_X = Позиция_X - Центр_По_X
    let п_Y = Позиция_Y - Центр_По_Y

    let Синус = Math.sin(Угол_В_Радианах)
    let Косинус = Math.cos(Угол_В_Радианах)

    let Угол_X = Центр_По_X + п_X * Косинус - п_Y * Синус
    let Угол_Y = Центр_По_Y + п_X * Синус + п_Y * Косинус

    return ({ Лево: Угол_X, Верх: Угол_Y })
}

function Кривая_Безье_Создать({
    Первая_Точка_Позиция_X = 0,
    Первая_Точка_Позиция_Y = 0,
    Вторая_Точка_Позиция_X = 0,
    Вторая_Точка_Позиция_Y = 0,
    Третья_Точка_Позиция_X = 0,
    Третья_Точка_Позиция_Y = 0,
    Четвёртая_Точка_Позиция_X = 0,
    Четвёртая_Точка_Позиция_Y = 0,
    Цвет = "black",
    Толщина_Линии = 6,
    Прозрачность = 1
}) {
    Контекст.globalAlpha = Прозрачность
    Контекст.strokeStyle = Цвет
    Контекст.beginPath()
    Контекст.lineWidth = Толщина_Линии
    Контекст.moveTo(Первая_Точка_Позиция_X, Первая_Точка_Позиция_Y)
    Контекст.bezierCurveTo(
        Вторая_Точка_Позиция_X, Вторая_Точка_Позиция_Y,
        Третья_Точка_Позиция_X, Третья_Точка_Позиция_Y,
        Четвёртая_Точка_Позиция_X, Четвёртая_Точка_Позиция_Y
    )
    Контекст.stroke()
}

class Линия {
    constructor({
        Начало_Линии_Позиция_X = 0,
        Начало_Линии_Позиция_Y = 0,
        Конец_Линии_Позиция_X = 0,
        Конец_Линии_Позиция_Y = 0,
        Цвет = "black",
        Толщина_Линии = 6,
        Закруглить_Концы_Линии = false,
        Прозрачность = 1,
        п_Контекст = Контекст,
        Штрих = false,
        Край = "butt"
    }) {
        this.Начало_Линии_Позиция_X = Начало_Линии_Позиция_X
        this.Начало_Линии_Позиция_Y = Начало_Линии_Позиция_Y
        this.Конец_Линии_Позиция_X = Конец_Линии_Позиция_X
        this.Конец_Линии_Позиция_Y = Конец_Линии_Позиция_Y
        this.Цвет = Цвет
        this.Толщина_Линии = Толщина_Линии
        this.Закруглить_Концы_Линии = Закруглить_Концы_Линии
        this.Прозрачность = Прозрачность
        this.Контекст = п_Контекст
        this.Штрих = Штрих
        this.Край = Край
    }

    Обновить() {
        this.Контекст.beginPath()
        if (this.Штрих) {
            this.Контекст.setLineDash([5, 15])
        }
        this.Контекст.globalAlpha = this.Прозрачность
        this.Контекст.strokeStyle = this.Цвет
        this.Контекст.lineWidth = this.Толщина_Линии
        this.Контекст.lineCap = this.Край
        this.Контекст.moveTo(this.Начало_Линии_Позиция_X, this.Начало_Линии_Позиция_Y)
        this.Контекст.lineTo(this.Конец_Линии_Позиция_X, this.Конец_Линии_Позиция_Y)
        if (this.Закруглить_Концы_Линии)
            this.Контекст.lineCap = "round"
        this.Контекст.stroke()
        return this
    }
}

function Дистанция_Определить(Позиция_X1, Позиция_Y1, Позиция_X2, Позиция_Y2) {
    let Дистанция_По_X = Позиция_X1 - Позиция_X2
    let Дистанция_По_Y = Позиция_Y1 - Позиция_Y2
    return Math.sqrt((Дистанция_По_X * Дистанция_По_X) + (Дистанция_По_Y * Дистанция_По_Y))
}

function Столкновения_Определить_Линия_Точка(Точка_Позиция_X, Точка_Позиция_Y, Линия) {
    let Дистанция_Начало_Линии = Дистанция_Определить(Точка_Позиция_X, Точка_Позиция_Y, Линия.Начало_Линии_Позиция_X, Линия.Начало_Линии_Позиция_Y)
    let Дистанция_Конец_Линии = Дистанция_Определить(Точка_Позиция_X, Точка_Позиция_Y, Линия.Конец_Линии_Позиция_X, Линия.Конец_Линии_Позиция_Y)
    let Длина_Линии = Дистанция_Определить(Линия.Начало_Линии_Позиция_X, Линия.Начало_Линии_Позиция_Y, Линия.Конец_Линии_Позиция_X, Линия.Конец_Линии_Позиция_Y)
    if ((Дистанция_Начало_Линии + Дистанция_Конец_Линии > Длина_Линии - 1) && (Дистанция_Начало_Линии + Дистанция_Конец_Линии < Длина_Линии + 1)) {
        return true
    } else {
        return false
    }
}

function Столкновение_Определить_Линия_Круг(Круг, Линия) {
    let Дистанция_Начало_Линии = Столкновения_Проверка_Точка_Круг(Линия.Начало_Линии_Позиция_X, Линия.Начало_Линии_Позиция_Y, Круг.Позиция.X, Круг.Позиция.Y, Круг.Радиус)
    let Дистанция_Конец_Линии = Столкновения_Проверка_Точка_Круг(Линия.Конец_Линии_Позиция_X, Линия.Конец_Линии_Позиция_Y, Круг.Позиция.X, Круг.Позиция.Y, Круг.Радиус)
    let Длина_Линии = Дистанция_Определить(Линия.Начало_Линии_Позиция_X, Линия.Начало_Линии_Позиция_Y, Линия.Конец_Линии_Позиция_X, Линия.Конец_Линии_Позиция_Y)

    let Точка = (((Круг.Позиция.X - Линия.Начало_Линии_Позиция_X) * (Линия.Конец_Линии_Позиция_X - Линия.Начало_Линии_Позиция_X)) + ((Круг.Позиция.Y - Линия.Начало_Линии_Позиция_Y) * (Линия.Конец_Линии_Позиция_Y - Линия.Начало_Линии_Позиция_Y))) / Math.pow(Длина_Линии, 2)
    let Точка_X = Линия.Начало_Линии_Позиция_X + (Точка * (Линия.Конец_Линии_Позиция_X - Линия.Начало_Линии_Позиция_X))
    let Точка_Y = Линия.Начало_Линии_Позиция_Y + (Точка * (Линия.Конец_Линии_Позиция_Y - Линия.Начало_Линии_Позиция_Y))

    let Дистанция = Дистанция_Определить(Круг.Позиция.X, Круг.Позиция.Y, Точка_X, Точка_Y)

    if (Дистанция_Начало_Линии || Дистанция_Конец_Линии) {
        return true
    }
    if (!Столкновения_Определить_Линия_Точка(Точка_X, Точка_Y, Линия)) {
        return false
    }
    if (Дистанция < Круг.Радиус) {
        return true
    }
}

function Столкновения_Проверка_Точка_Круг(Позиция_X1, Позиция_Y1, Позиция_X2, Позиция_Y2, Радиус) {
    let Дистанция = Дистанция_Определить(Позиция_X1, Позиция_Y1, Позиция_X2, Позиция_Y2)
    if (Дистанция < Радиус) {
        return true
    }
    return false
}

function Синус_Получить(Угол) {
    return Math.sin(Угол)
}

function Косинус_Получить(Угол) {
    return Math.cos(Угол)
}

function Перевести_Радианы_В_Углы(Радианы) {
    return Радианы * (180 / Math.PI)
}

function Перевести_Углы_В_Радианы(Угол) {
    return Угол * (Math.PI / 180)
}